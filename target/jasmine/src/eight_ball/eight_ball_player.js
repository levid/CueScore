// Generated by CoffeeScript 1.3.1
(function() {
  var Player,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Player = (function(_super) {

    __extends(Player, _super);

    Player.name = 'Player';

    Player.prototype.defaults = {
      name: null,
      rank: null,
      number: null,
      team_number: null,
      games_won: 0,
      safeties: 0,
      currently_up: false,
      eight_on_snaps: 0,
      break_and_runs: 0,
      timeouts_allowed: null,
      games_needed_to_win: 0,
      is_captain: false
    };

    function Player(options) {
      var _ref, _ref1, _ref2, _ref3;
      _.extend(this, this.defaults);
      this.name = (_ref = options.name) != null ? _ref : options.name = null;
      this.rank = (_ref1 = options.rank) != null ? _ref1 : options.rank = null;
      this.number = (_ref2 = options.playerNumber) != null ? _ref2 : options.playerNumber = null;
      this.team_number = (_ref3 = options.teamNumber) != null ? _ref3 : options.teamNumber = null;
      this.timeouts_allowed = new $CS.Models.EightBall.Ranks().getTimeouts(this.rank);
    }

    Player.prototype.getGamesNeededToWin = function() {
      return this.games_needed_to_win.toString();
    };

    Player.prototype.getFirstNameWithInitials = function() {
      var nameToReturn, spaceIndex;
      spaceIndex = this.name.indexOf(" ");
      if (spaceIndex === -1) {
        return this.name;
      }
      nameToReturn = this.name.substr(0, spaceIndex);
      return nameToReturn + " " + this.name[spaceIndex + 1] + ".";
    };

    Player.prototype.getSafeties = function() {
      return this.safeties;
    };

    Player.prototype.getGamesWon = function() {
      return this.games_won.toString();
    };

    Player.prototype.getEightOnSnaps = function() {
      return this.eight_on_snaps.toString();
    };

    Player.prototype.getBreakAndRuns = function() {
      return this.break_and_runs.toString();
    };

    Player.prototype.resetPlayerRankStats = function() {
      return this.timeouts_allowed = new $CS.Models.EightBall.Ranks().getTimeouts(this.rank);
    };

    Player.prototype.addToGamesWon = function(num) {
      return this.games_won += num;
    };

    Player.prototype.addToSafeties = function(num) {
      return this.safeties += num;
    };

    Player.prototype.addToEightOnSnaps = function(num) {
      return this.eight_on_snaps += num;
    };

    Player.prototype.addToBreakAndRuns = function(num) {
      return this.break_and_runs += num;
    };

    Player.prototype.toJSON = function() {
      return {
        name: this.name,
        rank: this.rank,
        games_needed_to_win: this.games_needed_to_win,
        number: this.number,
        team_number: this.team_number,
        games_won: this.games_won,
        safeties: this.safeties,
        eight_on_snaps: this.eight_on_snaps,
        break_and_runs: this.break_and_runs,
        currently_up: this.currently_up
      };
    };

    Player.prototype.fromJSON = function(playerJSON) {
      this.name = playerJSON.name;
      this.rank = playerJSON.rank;
      this.number = playerJSON.number;
      this.team_number = playerJSON.team_number;
      this.games_won = playerJSON.games_won;
      this.safeties = playerJSON.safeties;
      this.eight_on_snaps = playerJSON.eight_on_snaps;
      this.break_and_runs = playerJSON.break_and_runs;
      this.currently_up = playerJSON.currently_up;
      return this.resetPlayerRankStats();
    };

    return Player;

  })($CS.Models.EightBall);

  $CS.Models.EightBall.Player = Player;

}).call(this);
