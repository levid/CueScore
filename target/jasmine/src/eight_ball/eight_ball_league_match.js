// Generated by CoffeeScript 1.3.1
(function() {
  var LeagueMatch,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  LeagueMatch = (function(_super) {

    __extends(LeagueMatch, _super);

    LeagueMatch.name = 'LeagueMatch';

    LeagueMatch.prototype.defaults = {
      gameType: null,
      match: [
        {
          one: null,
          two: null,
          three: null,
          four: null,
          five: null
        }
      ],
      teamNumber: "",
      homeTeam: {
        number: null,
        name: null,
        signed: false
      },
      awayTeam: {
        number: null,
        name: null,
        signed: false
      },
      startTime: null,
      endTime: "",
      tableType: null,
      smallJson: false,
      leagueMatchId: 0
    };

    function LeagueMatch(GameType, HomeTeamNumber, AwayTeamNumber, HomeTeamName, AwayTeamName, StartTime, TableType) {
      _.extend(this, this.defaults);
      this.gameType = "EightBall";
      this.homeTeam.number = HomeTeamNumber || null;
      this.homeTeam.name = HomeTeamName || "";
      this.awayTeam.number = AwayTeamNumber || null;
      this.awayTeam.name = AwayTeamName || "";
      this.startTime = StartTime || "";
      this.tableType = TableType || "";
      this.DataService = $CS.Utilities.DataService;
      console.log(this.DataService);
      this.DataService.saveLeagueMatch(this, function(id) {
        return this.leagueMatchId = id;
      });
    }

    LeagueMatch.prototype.getHomeTeamScore = function() {
      var totalScore;
      totalScore = 0;
      totalScore = this.match['one'].getMatchPointsByTeamNumber(this.homeTeam.number);
      totalScore += this.match['two'].getMatchPointsByTeamNumber(this.homeTeam.number);
      totalScore += this.match['three'].getMatchPointsByTeamNumber(this.homeTeam.number);
      totalScore += this.match['four'].getMatchPointsByTeamNumber(this.homeTeam.number);
      totalScore += this.match['five'].getMatchPointsByTeamNumber(this.homeTeam.number);
      return totalScore;
    };

    LeagueMatch.prototype.getAwayTeamScore = function() {
      var totalScore;
      totalScore = this.match['one'].getMatchPointsByTeamNumber(this.awayTeam.number);
      totalScore += this.match['two'].getMatchPointsByTeamNumber(this.awayTeam.number);
      totalScore += this.match['three'].getMatchPointsByTeamNumber(this.awayTeam.number);
      totalScore += this.match['four'].getMatchPointsByTeamNumber(this.awayTeam.number);
      totalScore += this.match['five'].getMatchPointsByTeamNumber(this.awayTeam.number);
      return totalScore;
    };

    LeagueMatch.prototype.setMatch = function(matchData, matchNum) {
      var matchNumString;
      matchNumString = null;
      if (matchNum === 1) {
        matchNumString = "one";
      } else if (matchNum === 2) {
        matchNumString = "two";
      } else if (matchNum === 3) {
        matchNumString = "three";
      } else if (matchNum === 4) {
        matchNumString = "four";
      } else if (matchNum === 5) {
        matchNumString = "five";
      }
      this.match[matchNumString] = match;
      this.match[matchNumString].leagueMatchId = this.leagueMatchId;
      if (!(this.match[matchNumString].original_id != null) || this.match[matchNumString].original_id === 0) {
        return this.DataService.saveMatch(this.match[matchNumString], function(id) {
          return this.match[matchNumString].original_id = id;
        });
      }
    };

    LeagueMatch.prototype.getMatchPointsByTeam = function(team) {
      var awayScore, homeScore, name, names, _fn, _fn1, _i, _j, _len, _len1,
        _this = this;
      if (team === "home") {
        homeScore = 0;
        names = ['one', 'two', 'three', 'four', 'five'];
        _fn = function(name) {
          if (_this.match[name].player_one.teamNumber = _this.homeTeam.number) {
            return homeScore += _this.match[name].getMatchPointsByPlayer(1);
          } else {
            return homeScore += _this.match[name].getMatchPointsByPlayer(2);
          }
        };
        for (_i = 0, _len = names.length; _i < _len; _i++) {
          name = names[_i];
          _fn(name);
        }
        return homeScore;
      } else if (team === "away") {
        awayScore = 0;
        names = ['one', 'two', 'three', 'four', 'five'];
        _fn1 = function(name) {
          if (_this.match[name].player_one.teamNumber === _this.awayTeam.number) {
            return awayScore += _this.match[name].getMatchPointsByPlayer(1);
          } else {
            return awayScore += _this.match[name].getMatchPointsByPlayer(2);
          }
        };
        for (_j = 0, _len1 = names.length; _j < _len1; _j++) {
          name = names[_j];
          _fn1(name);
        }
        return awayScore;
      }
    };

    LeagueMatch.prototype.isHomeTeamWinning = function() {
      if (this.getMatchPointsByTeam('home') > this.getMatchPointsByTeam('away')) {
        return true;
      }
      return false;
    };

    LeagueMatch.prototype.isAwayTeamWinning = function() {
      if (this.getMatchPointsByTeam('home') < this.getMatchPointsByTeam('away')) {
        return true;
      }
      return false;
    };

    LeagueMatch.prototype.getWinningTeamNumber = function() {
      if (this.getMatchPointsByTeam('home') < this.getMatchPointsByTeam('away')) {
        return this.awayTeam.number;
      }
      return this.homeTeam.number;
    };

    LeagueMatch.prototype.toJSON = function() {
      if (this.smallJson === true) {
        return this.toSmallJSON();
      }
      return {
        matchOne: this.match['one'].toJSON(),
        matchTwo: this.match['two'].toJSON(),
        matchThree: this.match['three'].toJSON(),
        matchFour: this.match['four'].toJSON(),
        matchFive: this.match['five'].toJSON(),
        teamNumber: this.teamNumber,
        homeTeamNumber: this.homeTeam.number,
        awayTeamNumber: this.awayTeam.number,
        startTime: this.startTime,
        endTime: this.endTime,
        tableType: this.tableType,
        leagueMatchId: this.leagueMatchId
      };
    };

    LeagueMatch.prototype.fromJSON = function(jsonLeagueMatch) {
      var matchFive, matchFour, matchOne, matchThree, matchTwo;
      matchOne = new $CS.Models.EightBall.LeagueMatch();
      matchTwo = new $CS.Models.EightBall.LeagueMatch();
      matchThree = new $CS.Models.EightBall.LeagueMatch();
      matchFour = new $CS.Models.EightBall.LeagueMatch();
      matchFive = new $CS.Models.EightBall.LeagueMatch();
      matchOne.fromJSON(jsonLeagueMatch.matchOne);
      matchTwo.fromJSON(jsonLeagueMatch.matchTwo);
      matchThree.fromJSON(jsonLeagueMatch.matchThree);
      matchFour.fromJSON(jsonLeagueMatch.matchFour);
      matchFive.fromJSON(jsonLeagueMatch.matchFive);
      this.match['one'] = matchOne;
      this.match['two'] = matchTwo;
      this.match['three'] = matchThree;
      this.match['four'] = matchFour;
      this.match['five'] = matchFive;
      this.teamNumber = jsonLeagueMatch.TeamNumber;
      this.homeTeam.number = jsonLeagueMatch.HomeTeamNumber;
      this.awayTeam.number = jsonLeagueMatch.AwayTeamNumber;
      this.startTime = jsonLeagueMatch.StartTime;
      this.endTime = jsonLeagueMatch.EndTime;
      this.tableType = jsonLeagueMatch.TableType;
      return this.leagueMatchId = jsonLeagueMatch.LeagueMatchId;
    };

    LeagueMatch.prototype.toSmallJSON = function() {
      return {
        teamNumber: this.teamNumber,
        homeTeamNumber: this.homeTeam.number,
        awayTeamNumber: this.awayTeam.number,
        startTime: this.startTime,
        endTime: this.endTime,
        tableType: this.tableType,
        leagueMatchId: this.leagueMatchId
      };
    };

    LeagueMatch.prototype.fromSmallJSON = function(jsonLeagueMatch) {
      this.teamNumber = jsonLeagueMatch.teamNumber;
      this.homeTeam.number = jsonLeagueMatch.homeTeamNumber;
      this.awayTeam.number = jsonLeagueMatch.awayTeamNumber;
      this.startTime = jsonLeagueMatch.startTime;
      this.endTime = jsonLeagueMatch.endTime;
      this.tableType = jsonLeagueMatch.tableType;
      return this.leagueMatchId = jsonLeagueMatch.leagueMatchId;
    };

    LeagueMatch.prototype.ended = function() {
      return this.match['one'].ended && this.match['two'].ended && this.match['three'].ended && this.match['four'].ended && this.match['five'].ended;
    };

    return LeagueMatch;

  })($CS.Models.EightBall);

  $CS.Models.EightBall.LeagueMatch = LeagueMatch;

}).call(this);
