// Generated by CoffeeScript 1.3.3
(function() {

  describe("Eight Ball League Match", function() {
    var leagueMatch;
    leagueMatch = void 0;
    beforeEach(function() {
      var options;
      leagueMatch = new $CS.Models.EightBall.LeagueMatch(options = {
        homeTeamNumber: "123",
        awayTeamNumber: "345",
        homeTeamName: "HomeTeam",
        awayTeamName: "AwayTeam",
        startTime: "10:00 pm",
        tableType: "Coin-Operated"
      });
      leagueMatch.setMatch(new $CS.Models.EightBall.Match(options = {
        playerOneName: "Player1",
        playerTwoName: "Player2",
        playerOnRank: 2,
        playerTwoRank: 2,
        playerOneNumber: "1",
        playerTwoNumber: "2",
        playerOneTeamNumber: "123",
        playerTwoTeamNumber: "345"
      }), 1);
      leagueMatch.match.one.player.one.currentlyUp = true;
      leagueMatch.setMatch(new $CS.Models.EightBall.Match(options = {
        playerOneName: "Player1",
        playerTwoName: "Player2",
        playerOnRank: 2,
        playerTwoRank: 2,
        playerOneNumber: "1",
        playerTwoNumber: "2",
        playerOneTeamNumber: "345",
        playerTwoTeamNumber: "123"
      }), 2);
      leagueMatch.match.two.player.one.currentlyUp = true;
      leagueMatch.setMatch(new $CS.Models.EightBall.Match(options = {
        playerOneName: "Player1",
        playerTwoName: "Player2",
        playerOnRank: 2,
        playerTwoRank: 2,
        playerOneNumber: "1",
        playerTwoNumber: "2",
        playerOneTeamNumber: "123",
        playerTwoTeamNumber: "345"
      }), 3);
      leagueMatch.match.three.player.one.currentlyUp = true;
      leagueMatch.setMatch(new $CS.Models.EightBall.Match(options = {
        playerOneName: "Player1",
        playerTwoName: "Player2",
        playerOnRank: 2,
        playerTwoRank: 2,
        playerOneNumber: "1",
        playerTwoNumber: "2",
        playerOneTeamNumber: "345",
        playerTwoTeamNumber: "123"
      }), 4);
      leagueMatch.match.four.player.one.currentlyUp = true;
      leagueMatch.setMatch(new $CS.Models.EightBall.Match(options = {
        playerOneName: "Player1",
        playerTwoName: "Player2",
        playerOnRank: 2,
        playerTwoRank: 2,
        playerOneNumber: "1",
        playerTwoNumber: "2",
        playerOneTeamNumber: "123",
        playerTwoTeamNumber: "345"
      }), 5);
      return leagueMatch.match.five.player.one.currentlyUp = true;
    });
    it("should have homeTeamNumber, awayTeamNumber, startTime, and tableType initialized from constructor", function() {
      expect(leagueMatch.homeTeamNumber).toEqual("123");
      expect(leagueMatch.awayTeamNumber).toEqual("345");
      expect(leagueMatch.startTime).toEqual("10:00 pm");
      return expect(leagueMatch.tableType).toEqual("Coin-Operated");
    });
    it("should hold 5 different games", function() {
      expect(leagueMatch.match.one).toNotEqual(null);
      expect(leagueMatch.match.two).toNotEqual(null);
      expect(leagueMatch.match.three).toNotEqual(null);
      expect(leagueMatch.match.four).toNotEqual(null);
      return expect(leagueMatch.match.five).toNotEqual(null);
    });
    it("should hold a home and away team numbers", function() {
      expect(leagueMatch.homeTeamNumber).toEqual("123");
      return expect(leagueMatch.awayTeamNumber).toEqual("345");
    });
    it("should keep scorecard team owners number", function() {
      return expect(leagueMatch.teamNumber).toEqual("");
    });
    it("should have the Start Time and End Time", function() {
      return expect(leagueMatch.endTime).toEqual("");
    });
    it("should be able to set each match and set the leagueMatchId for each", function() {
      expect(leagueMatch.match.one.leagueMatchId).toEqual(1);
      expect(leagueMatch.match.two.leagueMatchId).toEqual(2);
      expect(leagueMatch.match.three.leagueMatchId).toEqual(3);
      expect(leagueMatch.match.four.leagueMatchId).toEqual(4);
      return expect(leagueMatch.match.five.leagueMatchId).toEqual(5);
    });
    it("should know when all of the matches have ended and the league match is complete", function() {
      leagueMatch.match.one.ended = true;
      leagueMatch.match.two.ended = true;
      leagueMatch.match.three.ended = true;
      leagueMatch.match.four.ended = true;
      leagueMatch.match.five.ended = true;
      return expect(leagueMatch.ended()).toEqual(true);
    });
    it("should be able to get the home teams total match points", function() {
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.one.startNewGame();
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.two.shotMissed();
      leagueMatch.match.two.scoreNumberedBall(8);
      leagueMatch.match.two.startNewGame();
      leagueMatch.match.two.scoreNumberedBall(8);
      leagueMatch.match.two.startNewGame();
      leagueMatch.match.two.scoreNumberedBall(8);
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.three.startNewGame();
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.four.startNewGame();
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.five.shotMissed();
      leagueMatch.match.five.scoreNumberedBall(8);
      leagueMatch.match.five.startNewGame();
      leagueMatch.match.five.scoreNumberedBall(8);
      leagueMatch.match.five.startNewGame();
      leagueMatch.match.five.scoreNumberedBall(8);
      return expect(leagueMatch.getMatchPointsByTeam('home')).toEqual(5);
    });
    it("should be able to get the away teams total match points", function() {
      leagueMatch.match.one.shotMissed();
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.one.startNewGame();
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.one.startNewGame();
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.two.scoreNumberedBall(8);
      leagueMatch.match.two.startNewGame();
      leagueMatch.match.two.scoreNumberedBall(8);
      leagueMatch.match.three.shotMissed();
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.three.startNewGame();
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.three.startNewGame();
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.four.shotMissed();
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.four.startNewGame();
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.four.startNewGame();
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.five.scoreNumberedBall(8);
      leagueMatch.match.five.startNewGame();
      leagueMatch.match.five.scoreNumberedBall(8);
      expect(leagueMatch.getMatchPointsByTeam('away')).toEqual(5);
      return expect(leagueMatch.getMatchPointsByTeam('home')).toEqual(0);
    });
    it("should know if home team won the match", function() {
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.one.startNewGame();
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.two.shotMissed();
      leagueMatch.match.two.scoreNumberedBall(8);
      leagueMatch.match.two.startNewGame();
      leagueMatch.match.two.scoreNumberedBall(8);
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.three.startNewGame();
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.four.startNewGame();
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.five.shotMissed();
      leagueMatch.match.five.scoreNumberedBall(8);
      leagueMatch.match.five.startNewGame();
      leagueMatch.match.five.scoreNumberedBall(8);
      return expect(leagueMatch.isHomeTeamWinning()).toEqual(true);
    });
    it("should know if away team won the match", function() {
      leagueMatch.match.one.shotMissed();
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.one.startNewGame();
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.one.startNewGame();
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.two.scoreNumberedBall(8);
      leagueMatch.match.two.startNewGame();
      leagueMatch.match.two.scoreNumberedBall(8);
      leagueMatch.match.three.shotMissed();
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.three.startNewGame();
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.three.startNewGame();
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.four.shotMissed();
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.four.startNewGame();
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.four.startNewGame();
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.five.scoreNumberedBall(8);
      leagueMatch.match.five.startNewGame();
      leagueMatch.match.five.scoreNumberedBall(8);
      expect(leagueMatch.getMatchPointsByTeam('away')).toEqual(5);
      expect(leagueMatch.getMatchPointsByTeam('home')).toEqual(0);
      return expect(leagueMatch.isAwayTeamWinning()).toEqual(true);
    });
    it("should be able to get the winning team number if its the away team", function() {
      leagueMatch.match.one.shotMissed();
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.one.startNewGame();
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.one.startNewGame();
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.two.scoreNumberedBall(8);
      leagueMatch.match.two.startNewGame();
      leagueMatch.match.two.scoreNumberedBall(8);
      leagueMatch.match.three.shotMissed();
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.three.startNewGame();
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.three.startNewGame();
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.four.shotMissed();
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.four.startNewGame();
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.four.startNewGame();
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.five.scoreNumberedBall(8);
      leagueMatch.match.five.startNewGame();
      leagueMatch.match.five.scoreNumberedBall(8);
      return expect(leagueMatch.getWinningTeamNumber()).toEqual("345");
    });
    it("should be able to get the winning team number if it is the home team", function() {
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.one.startNewGame();
      leagueMatch.match.one.scoreNumberedBall(8);
      leagueMatch.match.two.shotMissed();
      leagueMatch.match.two.scoreNumberedBall(8);
      leagueMatch.match.two.startNewGame();
      leagueMatch.match.two.scoreNumberedBall(8);
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.three.startNewGame();
      leagueMatch.match.three.scoreNumberedBall(8);
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.four.startNewGame();
      leagueMatch.match.four.scoreNumberedBall(8);
      leagueMatch.match.five.shotMissed();
      leagueMatch.match.five.scoreNumberedBall(8);
      leagueMatch.match.five.startNewGame();
      leagueMatch.match.five.scoreNumberedBall(8);
      return expect(leagueMatch.getWinningTeamNumber()).toEqual("123");
    });
    it("should be able to keep team names", function() {
      expect(leagueMatch.homeTeamName).toEqual("HomeTeam");
      return expect(leagueMatch.awayTeamName).toEqual("AwayTeam");
    });
    it("should be able to tell which team has signed the match", function() {
      expect(leagueMatch.homeTeamSigned).toEqual(false);
      expect(leagueMatch.awayTeamSigned).toEqual(false);
      leagueMatch.homeTeamSigned = true;
      leagueMatch.awayTeamSigned = true;
      expect(leagueMatch.homeTeamSigned).toEqual(true);
      return expect(leagueMatch.awayTeamSigned).toEqual(true);
    });
    return describe("toJSON/fromJSON", function() {
      it("should be able to take a new League Match and turn it into a JSON object", function() {
        return expect(leagueMatch.toJSON()).toEqual({
          matchOne: {
            player: {
              one: {
                name: "Player1",
                rank: null,
                gamesNeededToWin: 0,
                number: "1",
                teamNumber: "123",
                gamesWon: 0,
                safeties: 0,
                eightOnSnaps: 0,
                breakAndRuns: 0,
                currentlyUp: true
              },
              two: {
                name: "Player2",
                rank: 2,
                gamesNeededToWin: 0,
                number: "2",
                teamNumber: "345",
                gamesWon: 0,
                safeties: 0,
                eightOnSnaps: 0,
                breakAndRuns: 0,
                currentlyUp: false
              }
            },
            playerOneWon: 0,
            playerTwoWon: 0,
            currentGame: {
              playerOneTimeoutsTaken: 0,
              playerTwoTimeoutsTaken: 0,
              playerOneEightOnSnap: true,
              playerOneBreakAndRun: false,
              playerTwoEightOnSnap: false,
              playerTwoBreakAndRun: false,
              playerOneBallType: null,
              playerTwoBallType: null,
              playerOneEightBall: [8],
              playerTwoEightBall: [],
              playerOneWon: true,
              playerTwoWon: false,
              numberOfInnings: 0,
              earlyEight: false,
              scratchOnEight: false,
              breakingPlayerStillShooting: true,
              stripedBallsHitIn: [],
              solidBallsHitIn: [],
              lastBallHitIn: null,
              onBreak: true,
              ended: false
            },
            completedGames: [
              {
                playerOneTimeoutsTaken: 0,
                playerTwoTimeoutsTaken: 0,
                playerOneEightOnSnap: true,
                playerOneBreakAndRun: false,
                playerTwoEightOnSnap: false,
                playerTwoBreakAndRun: false,
                playerOneBallType: null,
                playerTwoBallType: null,
                playerOneEightBall: [8],
                playerTwoEightBall: [],
                playerOneWon: true,
                playerTwoWon: false,
                numberOfInnings: 0,
                earlyEight: false,
                scratchOnEight: false,
                breakingPlayerStillShooting: true,
                stripedBallsHitIn: [],
                solidBallsHitIn: [],
                lastBallHitIn: 8,
                onBreak: true,
                ended: true
              }
            ],
            suddenDeath: false,
            forfeit: false,
            ended: false,
            originalId: 0,
            leagueMatchId: 1
          },
          matchTwo: {
            player: {
              one: {
                name: "Player1",
                rank: null,
                gamesNeededToWin: 0,
                number: "1",
                teamNumber: "123",
                gamesWon: 0,
                safeties: 0,
                eightOnSnaps: 0,
                breakAndRuns: 0,
                currentlyUp: true
              },
              two: {
                name: "Player2",
                rank: 2,
                gamesNeededToWin: 0,
                number: "2",
                teamNumber: "345",
                gamesWon: 0,
                safeties: 0,
                eightOnSnaps: 0,
                breakAndRuns: 0,
                currentlyUp: false
              }
            },
            playerOneWon: 0,
            playerTwoWon: 0,
            currentGame: {
              playerOneTimeoutsTaken: 0,
              playerTwoTimeoutsTaken: 0,
              playerOneEightOnSnap: true,
              playerOneBreakAndRun: false,
              playerTwoEightOnSnap: false,
              playerTwoBreakAndRun: false,
              playerOneBallType: null,
              playerTwoBallType: null,
              playerOneEightBall: [8],
              playerTwoEightBall: [],
              playerOneWon: true,
              playerTwoWon: false,
              numberOfInnings: 0,
              earlyEight: false,
              scratchOnEight: false,
              breakingPlayerStillShooting: true,
              stripedBallsHitIn: [],
              solidBallsHitIn: [],
              lastBallHitIn: null,
              onBreak: true,
              ended: false
            },
            completedGames: [
              {
                playerOneTimeoutsTaken: 0,
                playerTwoTimeoutsTaken: 0,
                playerOneEightOnSnap: true,
                playerOneBreakAndRun: false,
                playerTwoEightOnSnap: false,
                playerTwoBreakAndRun: false,
                playerOneBallType: null,
                playerTwoBallType: null,
                playerOneEightBall: [8],
                playerTwoEightBall: [],
                playerOneWon: true,
                playerTwoWon: false,
                numberOfInnings: 0,
                earlyEight: false,
                scratchOnEight: false,
                breakingPlayerStillShooting: true,
                stripedBallsHitIn: [],
                solidBallsHitIn: [],
                lastBallHitIn: 8,
                onBreak: true,
                ended: true
              }
            ],
            suddenDeath: false,
            forfeit: false,
            ended: false,
            originalId: 0,
            leagueMatchId: 2
          },
          matchThree: {
            player: {
              one: {
                name: "Player1",
                rank: null,
                gamesNeededToWin: 0,
                number: "1",
                teamNumber: "123",
                gamesWon: 0,
                safeties: 0,
                eightOnSnaps: 0,
                breakAndRuns: 0,
                currentlyUp: true
              },
              two: {
                name: "Player2",
                rank: 2,
                gamesNeededToWin: 0,
                number: "2",
                teamNumber: "345",
                gamesWon: 0,
                safeties: 0,
                eightOnSnaps: 0,
                breakAndRuns: 0,
                currentlyUp: false
              }
            },
            playerOneWon: 0,
            playerTwoWon: 0,
            currentGame: {
              playerOneTimeoutsTaken: 0,
              playerTwoTimeoutsTaken: 0,
              playerOneEightOnSnap: true,
              playerOneBreakAndRun: false,
              playerTwoEightOnSnap: false,
              playerTwoBreakAndRun: false,
              playerOneBallType: null,
              playerTwoBallType: null,
              playerOneEightBall: [8],
              playerTwoEightBall: [],
              playerOneWon: true,
              playerTwoWon: false,
              numberOfInnings: 0,
              earlyEight: false,
              scratchOnEight: false,
              breakingPlayerStillShooting: true,
              stripedBallsHitIn: [],
              solidBallsHitIn: [],
              lastBallHitIn: null,
              onBreak: true,
              ended: false
            },
            completedGames: [
              {
                playerOneTimeoutsTaken: 0,
                playerTwoTimeoutsTaken: 0,
                playerOneEightOnSnap: true,
                playerOneBreakAndRun: false,
                playerTwoEightOnSnap: false,
                playerTwoBreakAndRun: false,
                playerOneBallType: null,
                playerTwoBallType: null,
                playerOneEightBall: [8],
                playerTwoEightBall: [],
                playerOneWon: true,
                playerTwoWon: false,
                numberOfInnings: 0,
                earlyEight: false,
                scratchOnEight: false,
                breakingPlayerStillShooting: true,
                stripedBallsHitIn: [],
                solidBallsHitIn: [],
                lastBallHitIn: 8,
                onBreak: true,
                ended: true
              }
            ],
            suddenDeath: false,
            forfeit: false,
            ended: false,
            originalId: 0,
            leagueMatchId: 3
          },
          matchFour: {
            player: {
              one: {
                name: "Player1",
                rank: null,
                gamesNeededToWin: 0,
                number: "1",
                teamNumber: "123",
                gamesWon: 0,
                safeties: 0,
                eightOnSnaps: 0,
                breakAndRuns: 0,
                currentlyUp: true
              },
              two: {
                name: "Player2",
                rank: 2,
                gamesNeededToWin: 0,
                number: "2",
                teamNumber: "345",
                gamesWon: 0,
                safeties: 0,
                eightOnSnaps: 0,
                breakAndRuns: 0,
                currentlyUp: false
              }
            },
            playerOneWon: 0,
            playerTwoWon: 0,
            currentGame: {
              playerOneTimeoutsTaken: 0,
              playerTwoTimeoutsTaken: 0,
              playerOneEightOnSnap: true,
              playerOneBreakAndRun: false,
              playerTwoEightOnSnap: false,
              playerTwoBreakAndRun: false,
              playerOneBallType: null,
              playerTwoBallType: null,
              playerOneEightBall: [8],
              playerTwoEightBall: [],
              playerOneWon: true,
              playerTwoWon: false,
              numberOfInnings: 0,
              earlyEight: false,
              scratchOnEight: false,
              breakingPlayerStillShooting: true,
              stripedBallsHitIn: [],
              solidBallsHitIn: [],
              lastBallHitIn: null,
              onBreak: true,
              ended: false
            },
            completedGames: [
              {
                playerOneTimeoutsTaken: 0,
                playerTwoTimeoutsTaken: 0,
                playerOneEightOnSnap: true,
                playerOneBreakAndRun: false,
                playerTwoEightOnSnap: false,
                playerTwoBreakAndRun: false,
                playerOneBallType: null,
                playerTwoBallType: null,
                playerOneEightBall: [8],
                playerTwoEightBall: [],
                playerOneWon: true,
                playerTwoWon: false,
                numberOfInnings: 0,
                earlyEight: false,
                scratchOnEight: false,
                breakingPlayerStillShooting: true,
                stripedBallsHitIn: [],
                solidBallsHitIn: [],
                lastBallHitIn: 8,
                onBreak: true,
                ended: true
              }
            ],
            suddenDeath: false,
            forfeit: false,
            ended: false,
            originalId: 0,
            leagueMatchId: 4
          },
          matchFive: {
            player: {
              one: {
                name: "Player1",
                rank: null,
                gamesNeededToWin: 0,
                number: "1",
                teamNumber: "123",
                gamesWon: 0,
                safeties: 0,
                eightOnSnaps: 0,
                breakAndRuns: 0,
                currentlyUp: true
              },
              two: {
                name: "Player2",
                rank: 2,
                gamesNeededToWin: 0,
                number: "2",
                teamNumber: "345",
                gamesWon: 0,
                safeties: 0,
                eightOnSnaps: 0,
                breakAndRuns: 0,
                currentlyUp: false
              }
            },
            playerOneWon: 0,
            playerTwoWon: 0,
            currentGame: {
              playerOneTimeoutsTaken: 0,
              playerTwoTimeoutsTaken: 0,
              playerOneEightOnSnap: true,
              playerOneBreakAndRun: false,
              playerTwoEightOnSnap: false,
              playerTwoBreakAndRun: false,
              playerOneBallType: null,
              playerTwoBallType: null,
              playerOneEightBall: [8],
              playerTwoEightBall: [],
              playerOneWon: true,
              playerTwoWon: false,
              numberOfInnings: 0,
              earlyEight: false,
              scratchOnEight: false,
              breakingPlayerStillShooting: true,
              stripedBallsHitIn: [],
              solidBallsHitIn: [],
              lastBallHitIn: null,
              onBreak: true,
              ended: false
            },
            completedGames: [
              {
                playerOneTimeoutsTaken: 0,
                playerTwoTimeoutsTaken: 0,
                playerOneEightOnSnap: true,
                playerOneBreakAndRun: false,
                playerTwoEightOnSnap: false,
                playerTwoBreakAndRun: false,
                playerOneBallType: null,
                playerTwoBallType: null,
                playerOneEightBall: [8],
                playerTwoEightBall: [],
                playerOneWon: true,
                playerTwoWon: false,
                numberOfInnings: 0,
                earlyEight: false,
                scratchOnEight: false,
                breakingPlayerStillShooting: true,
                stripedBallsHitIn: [],
                solidBallsHitIn: [],
                lastBallHitIn: 8,
                onBreak: true,
                ended: true
              }
            ],
            suddenDeath: false,
            forfeit: false,
            ended: false,
            originalId: 0,
            leagueMatchId: 5
          },
          teamNumber: "",
          homeTeamNumber: "123",
          awayTeamNumber: "345",
          startTime: "10: 00pm",
          endTime: "",
          tableType: "Coin-Operated",
          leagueMatchId: 0
        });
      });
      it("should be able to take a new League Match and turn it into a small JSON object", function() {
        return expect(leagueMatch.toSmallJSON()).toEqual({
          teamNumber: "",
          homeTeamNumber: "123",
          awayTeamNumber: "345",
          startTime: "10:00 pm",
          endTime: "",
          tableType: "Coin-Operated",
          leagueMatchId: 1
        });
      });
      it("should be able to set SmallJSON = true to return only the small JSON object when toJSON is called.", function() {
        leagueMatch.SmallJSON = true;
        return expect(leagueMatch.toJSON()).toEqual({
          teamNumber: "",
          homeTeamNumber: "123",
          awayTeamNumber: "345",
          startTime: "10:00 pm",
          endTime: "",
          tableType: "Coin-Operated",
          leagueMatchId: 1
        });
      });
      it("should be able to take a json object and fill its own values", function() {
        var options;
        leagueMatch = new $CS.Models.EightBall.LeagueMatch(options = {
          homeTeamNumber: "123",
          awayTeamNumber: "345",
          homeTeamName: "HomeTeam",
          awayTeamName: "AwayTeam",
          startTime: "10:00 pm",
          tableType: "Coin-Operated"
        });
        leagueMatch.fromJSON({
          match: {
            one: {
              player: {
                one: {
                  name: "player.one",
                  rank: 2,
                  gamesNeededToWin: 2,
                  number: "1",
                  teamNumber: "123",
                  gamesWon: 0,
                  safeties: 0,
                  eightOnSnaps: 0,
                  breakAndRuns: 0,
                  currentlyUp: true
                },
                two: {
                  name: "Player2",
                  rank: 2,
                  gamesNeededToWin: 2,
                  number: "2",
                  teamNumber: "345",
                  gamesWon: 0,
                  safeties: 0,
                  eightOnSnaps: 0,
                  breakAndRuns: 0,
                  currentlyUp: false
                }
              },
              playerOneGamesWon: 0,
              playerTwoGamesWon: 0,
              currentGame: {
                playerOneTimeoutsTaken: 0,
                playerTwoTimeoutsTaken: 0,
                numberOfInnings: 0,
                PlayerOneEightOnSnap: false,
                playerOneBreakAndRun: false,
                playerTwoEightOnSnap: false,
                playerTwoBreakAndRun: false,
                playerOneBallType: null,
                playerTwoBallType: null,
                playerOneEightBall: [],
                playerTwoEightBall: [],
                playerOneWon: false,
                playerTwoWon: false,
                ended: false,
                stripedBallsHitIn: [],
                solidBallsHitIn: [],
                lastBallHitIn: null,
                onBreak: true,
                breakingPlayerStillShooting: true
              },
              completedGames: [],
              ended: false,
              originalId: 0,
              leagueMatchId: 1
            },
            two: {
              player: {
                one: {
                  name: "player.one",
                  rank: 2,
                  gamesNeededToWin: 2,
                  number: "1",
                  teamNumber: "345",
                  gamesWon: 0,
                  safeties: 0,
                  eightOnSnaps: 0,
                  breakAndRuns: 0,
                  currentlyUp: true
                },
                two: {
                  name: "Player2",
                  rank: 2,
                  gamesNeededToWin: 2,
                  number: "2",
                  teamNumber: "123",
                  gamesWon: 0,
                  safeties: 0,
                  eightOnSnaps: 0,
                  breakAndRuns: 0,
                  currentlyUp: false
                }
              },
              playerOneGamesWon: 0,
              playerTwoGamesWon: 0,
              currentGame: {
                playerOneTimeoutsTaken: 0,
                playerTwoTimeoutsTaken: 0,
                numberOfInnings: 0,
                PlayerOneEightOnSnap: false,
                playerOneBreakAndRun: false,
                playerTwoEightOnSnap: false,
                playerTwoBreakAndRun: false,
                playerOneBallType: null,
                playerTwoBallType: null,
                playerOneEightBall: [],
                playerTwoEightBall: [],
                playerOneWon: false,
                playerTwoWon: false,
                ended: false,
                stripedBallsHitIn: [],
                solidBallsHitIn: [],
                lastBallHitIn: null,
                onBreak: true,
                breakingPlayerStillShooting: true
              },
              completedGames: [],
              ended: false,
              originalId: 0,
              leagueMatchId: 1
            },
            three: {
              player: {
                one: {
                  name: "player.one",
                  rank: 2,
                  gamesNeededToWin: 2,
                  number: "1",
                  teamNumber: "123",
                  gamesWon: 0,
                  safeties: 0,
                  eightOnSnaps: 0,
                  breakAndRuns: 0,
                  currentlyUp: true
                },
                two: {
                  name: "Player2",
                  rank: 2,
                  gamesNeededToWin: 2,
                  number: "2",
                  teamNumber: "345",
                  gamesWon: 0,
                  safeties: 0,
                  eightOnSnaps: 0,
                  breakAndRuns: 0,
                  currentlyUp: false
                }
              },
              playerOneGamesWon: 0,
              playerTwoGamesWon: 0,
              currentGame: {
                playerOneTimeoutsTaken: 0,
                playerTwoTimeoutsTaken: 0,
                numberOfInnings: 0,
                PlayerOneEightOnSnap: false,
                playerOneBreakAndRun: false,
                playerTwoEightOnSnap: false,
                playerTwoBreakAndRun: false,
                playerOneBallType: null,
                playerTwoBallType: null,
                playerOneEightBall: [],
                playerTwoEightBall: [],
                playerOneWon: false,
                playerTwoWon: false,
                ended: false,
                stripedBallsHitIn: [],
                solidBallsHitIn: [],
                lastBallHitIn: null,
                onBreak: true,
                breakingPlayerStillShooting: true
              },
              completedGames: [],
              ended: false,
              originalId: 0,
              leagueMatchId: 1
            },
            four: {
              player: {
                one: {
                  name: "player.one",
                  rank: 2,
                  gamesNeededToWin: 2,
                  number: "1",
                  teamNumber: "123",
                  gamesWon: 0,
                  safeties: 0,
                  eightOnSnaps: 0,
                  breakAndRuns: 0,
                  currentlyUp: true
                },
                two: {
                  name: "Player2",
                  rank: 2,
                  gamesNeededToWin: 2,
                  number: "2",
                  teamNumber: "345",
                  gamesWon: 0,
                  safeties: 0,
                  eightOnSnaps: 0,
                  breakAndRuns: 0,
                  currentlyUp: false
                }
              },
              playerOneGamesWon: 0,
              playerTwoGamesWon: 0,
              currentGame: {
                playerOneTimeoutsTaken: 0,
                playerTwoTimeoutsTaken: 0,
                numberOfInnings: 0,
                PlayerOneEightOnSnap: false,
                playerOneBreakAndRun: false,
                playerTwoEightOnSnap: false,
                playerTwoBreakAndRun: false,
                playerOneBallType: null,
                playerTwoBallType: null,
                playerOneEightBall: [],
                playerTwoEightBall: [],
                playerOneWon: false,
                playerTwoWon: false,
                ended: false,
                stripedBallsHitIn: [],
                solidBallsHitIn: [],
                lastBallHitIn: null,
                onBreak: true,
                breakingPlayerStillShooting: true
              },
              completedGames: [],
              ended: false,
              originalId: 0,
              leagueMatchId: 1
            },
            five: {
              player: {
                one: {
                  name: "player.one",
                  rank: 2,
                  gamesNeededToWin: 2,
                  number: "1",
                  teamNumber: "345",
                  gamesWon: 0,
                  safeties: 0,
                  eightOnSnaps: 0,
                  breakAndRuns: 0,
                  currentlyUp: true
                },
                two: {
                  name: "Player2",
                  rank: 2,
                  gamesNeededToWin: 2,
                  number: "2",
                  teamNumber: "123",
                  gamesWon: 0,
                  safeties: 0,
                  eightOnSnaps: 0,
                  breakAndRuns: 0,
                  currentlyUp: false
                }
              },
              playerOneGamesWon: 0,
              playerTwoGamesWon: 0,
              currentGame: {
                playerOneTimeoutsTaken: 0,
                playerTwoTimeoutsTaken: 0,
                numberOfInnings: 0,
                PlayerOneEightOnSnap: false,
                playerOneBreakAndRun: false,
                playerTwoEightOnSnap: false,
                playerTwoBreakAndRun: false,
                playerOneBallType: null,
                playerTwoBallType: null,
                playerOneEightBall: [],
                playerTwoEightBall: [],
                playerOneWon: false,
                playerTwoWon: false,
                ended: false,
                stripedBallsHitIn: [],
                solidBallsHitIn: [],
                lastBallHitIn: null,
                onBreak: true,
                breakingPlayerStillShooting: true
              },
              completedGames: [],
              ended: false,
              originalId: 0,
              leagueMatchId: 1
            },
            teamNumber: "",
            homeTeamNumber: "123",
            awayTeamNumber: "345",
            startTime: "10:00 pm",
            endTime: "",
            tableType: "Coin-Operated",
            leagueMatchId: 1
          }
        });
        expect(leagueMatch.teamNumber).toEqual("");
        expect(leagueMatch.homeTeamNumber).toEqual("123");
        expect(leagueMatch.awayTeamNumber).toEqual("345");
        expect(leagueMatch.startTime).toEqual("10:00 pm");
        expect(leagueMatch.endTime).toEqual("");
        expect(leagueMatch.tableType).toEqual("Coin-Operated");
        expect(leagueMatch.leagueMatchId).toEqual(1);
        expect(leagueMatch.match.five.player.one.name).toEqual("Player One");
        leagueMatch.match.five.scoreNumberedBall(8);
        expect(leagueMatch.match.five.currentGame.getBallsHitIn()).toEqual([8]);
        leagueMatch.match.five.startNewGame();
        expect(leagueMatch.match.five.currentGame.getBallsHitIn()).toEqual([]);
        return expect(leagueMatch.match.five.completedGames.length).toEqual(1);
      });
      return it("should be able to take a small json object and fill its own values", function() {
        var options;
        leagueMatch = new $CS.Models.EightBall.LeagueMatch(options = {
          homeTeamNumber: "123",
          awayTeamNumber: "345",
          homeTeamName: "HomeTeam",
          awayTeamName: "AwayTeam",
          startTime: "10:00 pm",
          tableType: "Coin-Operated"
        });
        leagueMatch.fromSmallJSON({
          teamNumber: "",
          homeTeamNumber: "123",
          awayTeamNumber: "345",
          startTime: "10:00 pm",
          endTime: "",
          tableType: "Coin-Operated",
          leagueMatchId: null
        });
        expect(leagueMatch.teamNumber).toEqual("");
        expect(leagueMatch.homeTeamNumber).toEqual("123");
        expect(leagueMatch.awayTeamNumber).toEqual("345");
        expect(leagueMatch.startTime).toEqual("10:00 pm");
        expect(leagueMatch.endTime).toEqual("");
        expect(leagueMatch.tableType).toEqual("Coin-Operated");
        return expect(leagueMatch.leagueMatchId).toEqual(null);
      });
    });
  });

}).call(this);
