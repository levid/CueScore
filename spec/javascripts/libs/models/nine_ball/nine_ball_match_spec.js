// Generated by CoffeeScript 1.3.3
(function() {

  describe("Nine Ball Match", function() {
    var match, matchCallback;
    match = void 0;
    matchCallback = void 0;
    beforeEach(function() {
      var options;
      matchCallback = jasmine.createSpy();
      match = new $CS.Models.NineBall.Match(options = {
        playerOneName: "Player1",
        playerTwoName: "Player2",
        playerOneRank: 1,
        playerTwoRank: 7,
        playerOneNumber: "12345",
        playerTwoNumber: "987654",
        playerOneTeamNumber: "123",
        playerTwoTeamNumber: "456",
        matchCallback: matchCallback
      });
      match.player.one.currentlyUp = true;
      match.completedGames = [];
      match.ended = false;
      match.originalId = 0;
      match.leagueMatchId = 0;
      match.playerNumberWinning = 0;
      match.suddenDeath = false;
      match.forfeit = false;
      match.currentGame.player.one.score = 0;
      match.currentGame.player.one.nineOnSnap = false;
      match.currentGame.player.one.breakAndRun = false;
      match.currentGame.player.one.ballsHitIn = [];
      match.currentGame.player.one.deadBalls = [];
      match.currentGame.player.one.lastBall = null;
      match.currentGame.player.one.timeoutsTaken = 0;
      match.currentGame.player.two.score = 0;
      match.currentGame.player.two.nineOnSnap = false;
      match.currentGame.player.two.breakAndRun = false;
      match.currentGame.player.two.ballsHitIn = [];
      match.currentGame.player.two.deadBalls = [];
      match.currentGame.player.two.lastBall = null;
      match.currentGame.player.two.timeoutsTaken = 0;
      match.currentGame.numberOfInnings = 0;
      match.currentGame.ended = false;
      match.currentGame.onBreak = true;
      return match.currentGame.breakingPlayerStillShooting = true;
    });
    describe("Constructor", function() {
      it("should take 4 parameters", function() {
        return expect(match).toNotEqual(null);
      });
      it("should have 2 players", function() {
        expect(match.player.one.name).toEqual("Player1");
        expect(match.player.one.rank).toEqual(1);
        expect(match.player.one.number).toEqual("12345");
        expect(match.player.one.teamNumber).toEqual("123");
        expect(match.player.two.name).toEqual("Player2");
        expect(match.player.two.rank).toEqual(7);
        expect(match.player.two.number).toEqual("987654");
        return expect(match.player.two.teamNumber).toEqual("456");
      });
      it("should set Player 1 to break first", function() {
        return expect(match.player.one.currentlyUp).toEqual(true);
      });
      return it("should set create the first Game and set it to currentGame", function() {
        return expect(match.currentGame).toNotEqual(null);
      });
    });
    describe("Scoring", function() {
      it("should accept a number for the ball that was hit in", function() {
        return match.scoreNumberedBall(1);
      });
      it("should add 1 to the current Ball Count for the current player up for balls #1-8", function() {
        expect(match.currentGame.player.one.score).toEqual(0);
        match.scoreNumberedBall(1);
        expect(match.currentGame.player.one.score).toEqual(1);
        match.scoreNumberedBall(2);
        expect(match.currentGame.player.one.score).toEqual(2);
        match.scoreNumberedBall(3);
        expect(match.currentGame.player.one.score).toEqual(3);
        match.scoreNumberedBall(4);
        expect(match.currentGame.player.one.score).toEqual(4);
        match.scoreNumberedBall(5);
        expect(match.currentGame.player.one.score).toEqual(5);
        match.scoreNumberedBall(6);
        expect(match.currentGame.player.one.score).toEqual(6);
        match.scoreNumberedBall(7);
        expect(match.currentGame.player.one.score).toEqual(7);
        match.scoreNumberedBall(8);
        return expect(match.currentGame.player.one.score).toEqual(8);
      });
      it("should add 2 to the current Ball Count for the current player up for ball #9", function() {
        expect(match.currentGame.player.one.score).toEqual(0);
        match.scoreNumberedBall(9);
        return expect(match.currentGame.player.one.score).toEqual(2);
      });
      it("should be able to get match's points by the team number", function() {
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        return expect(match.getMatchPointsByTeamNumber("123")).toEqual(20);
      });
      return it("should be able to remember the last person that was winning incase of a tie", function() {
        match.scoreNumberedBall(1);
        expect(match.playerNumberWinning).toEqual(1);
        match.shotMissed();
        match.shotMissed();
        expect(match.player.two.currentlyUp).toEqual(true);
        match.scoreNumberedBall(2);
        expect(match.playerNumberWinning).toEqual(1);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        expect(match.playerNumberWinning).toEqual(2);
        match.shotMissed();
        match.scoreNumberedBall(7);
        return expect(match.playerNumberWinning).toEqual(1);
      });
    });
    describe("Match/Game Ending", function() {
      it("should add current game to the completedGames list and start a new Game when all 8 balls are accounted for on a DeadBall and 9 is scored", function() {
        expect(match.completedGames.length).toEqual(0);
        match.hitDeadBall(1);
        match.hitDeadBall(2);
        match.hitDeadBall(3);
        match.hitDeadBall(4);
        match.hitDeadBall(5);
        match.hitDeadBall(6);
        match.hitDeadBall(7);
        match.hitDeadBall(8);
        match.scoreNumberedBall(9);
        match.startNewGame();
        expect(match.completedGames.length).toEqual(1);
        expect(match.currentGame.getDeadBalls()).toEqual(0);
        expect(match.currentGame.ended).toEqual(false);
        return expect(match.completedGames[0].ended).toEqual(true);
      });
      it("should add current game to the completedGames list and start a new Game when all 9 balls are accounted for on a ScoredBall", function() {
        expect(match.completedGames.length).toEqual(0);
        match.hitDeadBall(1);
        match.hitDeadBall(2);
        match.hitDeadBall(3);
        match.hitDeadBall(4);
        match.hitDeadBall(5);
        match.hitDeadBall(6);
        match.hitDeadBall(7);
        match.hitDeadBall(8);
        match.scoreNumberedBall(9);
        match.startNewGame();
        expect(match.completedGames.length).toEqual(1);
        expect(match.currentGame.getDeadBalls()).toEqual(0);
        expect(match.currentGame.ended).toEqual(false);
        return expect(match.completedGames[0].ended).toEqual(true);
      });
      it("should know if the match is completed", function() {
        return expect(match.ended).toEqual(false);
      });
      it("match should be ended when ball #1-8 scores, which then raises CurrentPlayers score to equal Ball Count", function() {
        expect(match.ended).toEqual(false);
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.scoreNumberedBall(9);
        match.startNewGame();
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        return expect(match.ended).toEqual(true);
      });
      it("match should be ended when ball#9 scores, which then raises CurrentPlayers score to above or equal Ball Count", function() {
        expect(match.ended).toEqual(false);
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.scoreNumberedBall(9);
        match.startNewGame();
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(9);
        return expect(match.ended).toEqual(true);
      });
      return it("should hold multiple completed games", function() {
        return expect(match.completedGames).toNotEqual(null);
      });
    });
    describe("Players", function() {
      it("should be able to find the losing player", function() {
        match.scoreNumberedBall(9);
        return expect(match.getLosingPlayer().name).toEqual("Player2");
      });
      it("should be able to find the winning player", function() {
        match.scoreNumberedBall(9);
        return expect(match.getWinningPlayer().name).toEqual("Player1");
      });
      it("should change currently up player on missed shot", function() {
        expect(match.player.one.currentlyUp).toEqual(true);
        match.shotMissed();
        return expect(match.player.two.currentlyUp).toEqual(true);
      });
      it("should be able to get the player twos match points earned", function() {
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        expect(match.getMatchPointsByPlayer(2)).toEqual(0);
        match.shotMissed();
        match.shotMissed();
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.scoreNumberedBall(9);
        match.startNewGame();
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.scoreNumberedBall(9);
        return expect(match.getMatchPointsByPlayer(2)).toEqual(18);
      });
      it("should be able to see if Player One is winning", function() {
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        expect(match.isPlayerWinning(1)).toEqual(true);
        match.shotMissed();
        match.shotMissed();
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.scoreNumberedBall(9);
        return expect(match.isPlayerWinning(1)).toEqual(true);
      });
      it("should be able to see if Player Two is winning", function() {
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        expect(match.isPlayerWinning(2)).toEqual(false);
        match.shotMissed();
        match.shotMissed();
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        return expect(match.isPlayerWinning(2)).toEqual(false);
      });
      it("should be able to get the losing players match points earned", function() {
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        expect(match.getLosingPlayersMatchPoints()).toEqual(0);
        match.shotMissed();
        match.shotMissed();
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.scoreNumberedBall(9);
        match.startNewGame();
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.scoreNumberedBall(9);
        match.startNewGame();
        match.scoreNumberedBall(1);
        return expect(match.getLosingPlayersMatchPoints()).toEqual(2);
      });
      it("should be able to get the winning players match points earned", function() {
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        expect(match.getWinningPlayersMatchPoints()).toEqual(20);
        match.shotMissed();
        match.shotMissed();
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.scoreNumberedBall(9);
        match.startNewGame();
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.scoreNumberedBall(9);
        match.startNewGame();
        match.scoreNumberedBall(1);
        return expect(match.getWinningPlayersMatchPoints()).toEqual(18);
      });
      return it("should be able to get the the match points. (example 20-0)", function() {
        expect(match.getMatchPoints()).toEqual("Tied");
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        expect(match.getMatchPoints()).toEqual("20-0");
        match.shotMissed();
        match.shotMissed();
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.scoreNumberedBall(9);
        match.startNewGame();
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.scoreNumberedBall(9);
        match.startNewGame();
        match.scoreNumberedBall(1);
        return expect(match.getMatchPoints()).toEqual("2-18");
      });
    });
    it("should be able to set the a ball to be a deadball", function() {
      match.hitDeadBall(3);
      expect(match.currentGame.player.one.deadBalls[0]).toEqual(3);
      match.shotMissed();
      match.hitDeadBall(2);
      return expect(match.currentGame.player.two.deadBalls[0]).toEqual(2);
    });
    it("should be able to get the total number of innings", function() {
      expect(match.getTotalInnings()).toEqual("0");
      match.shotMissed();
      match.shotMissed();
      match.shotMissed();
      match.shotMissed();
      expect(match.getTotalInnings()).toEqual("2");
      match.shotMissed();
      match.shotMissed();
      return expect(match.getTotalInnings()).toEqual("3");
    });
    it("should be able to get the total number of dead balls", function() {
      expect(match.getTotalDeadBalls()).toEqual("0");
      match.scoreNumberedBall(9);
      expect(match.getTotalDeadBalls()).toEqual("8");
      match.startNewGame();
      match.hitDeadBall(1);
      match.hitDeadBall(2);
      expect(match.getTotalDeadBalls()).toEqual("10");
      match.hitDeadBall(3);
      match.hitDeadBall(4);
      match.hitDeadBall(5);
      match.hitDeadBall(6);
      return expect(match.getTotalDeadBalls()).toEqual("14");
    });
    it("should be able to hold on to the originalId from the database", function() {
      return expect(match.originalId).toEqual(0);
    });
    it("should be able to hold on to the leagueMatchId from the database", function() {
      return expect(match.leagueMatchId).toEqual(0);
    });
    it("should be able to know the current game number", function() {
      expect(match.getCurrentGameNumber()).toEqual("1");
      match.hitDeadBall(1);
      match.hitDeadBall(2);
      match.hitDeadBall(3);
      match.hitDeadBall(4);
      match.hitDeadBall(5);
      match.hitDeadBall(6);
      match.hitDeadBall(7);
      match.hitDeadBall(8);
      match.scoreNumberedBall(9);
      match.startNewGame();
      return expect(match.getCurrentGameNumber()).toEqual("2");
    });
    it("should be able to get total number of safeties", function() {
      return expect(match.getTotalSafeties()).toEqual("0 to 0");
    });
    it("should be able to hit a safety", function() {
      expect(match.getTotalSafeties()).toEqual("0 to 0");
      match.hitSafety();
      expect(match.getTotalSafeties()).toEqual("1 to 0");
      expect(match.player.one.safeties).toEqual(1);
      match.shotMissed();
      match.hitSafety();
      expect(match.getTotalSafeties()).toEqual("2 to 0");
      expect(match.player.two.safeties).toEqual(0);
      match.hitSafety();
      expect(match.getTotalSafeties()).toEqual("2 to 1");
      return expect(match.player.two.safeties).toEqual(1);
    });
    it("should reset Timeouts taken for each player when a game has ended", function() {
      expect(match.currentGame.player.one.timeoutsTaken).toEqual(0);
      expect(match.currentGame.player.two.timeoutsTaken).toEqual(0);
      match.currentGame.takeTimeout();
      expect(match.currentGame.player.one.timeoutsTaken).toEqual(1);
      match.shotMissed();
      match.currentGame.takeTimeout();
      expect(match.currentGame.player.two.timeoutsTaken).toEqual(1);
      match.scoreNumberedBall(9);
      match.startNewGame();
      expect(match.currentGame.player.one.timeoutsTaken).toEqual(0);
      return expect(match.currentGame.player.two.timeoutsTaken).toEqual(0);
    });
    return describe("toJSON/fromJSON", function() {
      it("should be able to take a new Match and turn it into a JSON object", function() {
        return expect(match.toJSON()).toEqual({
          player: {
            one: {
              name: "Player1",
              rank: 1,
              ballCount: "14",
              number: "12345",
              teamNumber: "123",
              score: 0,
              safeties: 0,
              nineOnSnaps: 0,
              breakAndRuns: 0,
              currentlyUp: true
            },
            two: {
              name: "Player2",
              rank: 7,
              ballCount: "55",
              number: "987654",
              teamNumber: "456",
              score: 0,
              safeties: 0,
              nineOnSnaps: 0,
              breakAndRuns: 0,
              currentlyUp: false
            }
          },
          playerOneMatchPointsEarned: 0,
          playerTwoMatchPointsEarned: 0,
          currentGame: {
            player: {
              one: {
                score: 0,
                timeoutsTaken: 0,
                nineOnSnap: false,
                breakAndRun: false,
                ballsHitIn: [],
                deadBalls: [],
                lastBall: null
              },
              two: {
                score: 0,
                timeoutsTaken: 0,
                nineOnSnap: false,
                breakAndRun: false,
                ballsHitIn: [],
                deadBalls: [],
                lastBall: null
              }
            },
            numberOfInnings: 0,
            ended: false,
            onBreak: true,
            breakingPlayerStillShooting: true
          },
          completedGames: [],
          ended: false,
          originalId: 0,
          leagueMatchId: 0
        });
      });
      it("should be able to take a filled Match and turn it into a JSON object", function() {
        match.scoreNumberedBall(1);
        match.shotMissed();
        match.hitDeadBall(2);
        match.shotMissed();
        match.scoreNumberedBall(9);
        match.startNewGame();
        return expect(match.toJSON()).toEqual({
          player: {
            one: {
              name: "Player1",
              rank: 1,
              ballCount: "14",
              number: "12345",
              teamNumber: "123",
              score: 1,
              safeties: 0,
              nineOnSnaps: 0,
              breakAndRuns: 0,
              currentlyUp: false
            },
            two: {
              name: "Player2",
              rank: 7,
              ballCount: "55",
              number: "987654",
              teamNumber: "456",
              score: 2,
              safeties: 0,
              nineOnSnaps: 0,
              breakAndRuns: 0,
              currentlyUp: true
            }
          },
          playerOneMatchPointsEarned: 20,
          playerTwoMatchPointsEarned: 0,
          currentGame: {
            player: {
              one: {
                score: 0,
                timeoutsTaken: 0,
                nineOnSnap: false,
                breakAndRun: false,
                ballsHitIn: [],
                deadBalls: [],
                lastBall: null
              },
              two: {
                score: 0,
                timeoutsTaken: 0,
                nineOnSnap: false,
                breakAndRun: false,
                ballsHitIn: [],
                deadBalls: [],
                lastBall: null
              }
            },
            numberOfInnings: 0,
            ended: false,
            onBreak: true,
            breakingPlayerStillShooting: true
          },
          completedGames: [
            {
              player: {
                one: {
                  score: 1,
                  timeoutsTaken: 0,
                  nineOnSnap: false,
                  breakAndRun: false,
                  ballsHitIn: [1],
                  deadBalls: [2],
                  lastBall: null
                },
                two: {
                  score: 2,
                  timeoutsTaken: 0,
                  nineOnSnap: false,
                  breakAndRun: false,
                  ballsHitIn: [9],
                  deadBalls: [3, 4, 5, 6, 7, 8],
                  lastBall: 9
                }
              },
              numberOfInnings: 0,
              ended: true,
              onBreak: false,
              breakingPlayerStillShooting: false
            }
          ],
          ended: false,
          originalId: 0,
          leagueMatchId: 0
        });
      });
      it("should be able to put a matches completed games into a JSON object", function() {
        match.scoreNumberedBall(1);
        match.shotMissed();
        match.hitDeadBall(2);
        match.shotMissed();
        match.scoreNumberedBall(9);
        match.startNewGame();
        return expect(match.completedGamesToJSON()).toEqual([
          {
            player: {
              one: {
                score: 1,
                timeoutsTaken: 0,
                nineOnSnap: false,
                breakAndRun: false,
                ballsHitIn: [1],
                deadBalls: [2],
                lastBall: null
              },
              two: {
                score: 2,
                timeoutsTaken: 0,
                nineOnSnap: false,
                breakAndRun: false,
                ballsHitIn: [9],
                deadBalls: [3, 4, 5, 6, 7, 8],
                lastBall: 9
              }
            },
            numberOfInnings: 0,
            ended: true,
            onBreak: false,
            breakingPlayerStillShooting: false
          }
        ]);
      });
      it("should be able to take a Player JSON and fill a Player object and return it", function() {
        var player;
        player = match.playerFromJSON({
          name: "James Armstead",
          rank: 2,
          number: "4321",
          teamNumber: "789",
          score: 12,
          safeties: 1,
          nineOnSnaps: 2,
          breakAndRuns: 3,
          currentlyUp: false
        });
        expect(player.name).toEqual("James Armstead");
        expect(player.rank).toEqual(2);
        expect(player.number).toEqual("4321");
        expect(player.teamNumber).toEqual("789");
        expect(player.score).toEqual(12);
        expect(player.safeties).toEqual(1);
        expect(player.nineOnSnaps).toEqual(2);
        expect(player.breakAndRuns).toEqual(3);
        expect(player.ballCount).toEqual("19");
        expect(player.currentlyUp).toEqual(false);
        player.addToNineOnSnaps(1);
        return expect(player.nineOnSnaps).toEqual(3);
      });
      it("should be able to take a Match JSON and fill its values", function() {
        var options;
        match = new $CS.Models.NineBall.Match(options = {
          playerOneName: "Player1",
          playerTwoName: "Player2",
          playerOneRank: 1,
          playerTwoRank: 7,
          playerOneNumber: "12345",
          playerTwoNumber: "987654",
          playerOneTeamNumber: "123",
          playerTwoTeamNumber: "456",
          matchCallback: matchCallback
        });
        match.fromJSON({
          player: {
            one: {
              name: "Player1",
              rank: 1,
              ballCount: "14",
              number: "12345",
              teamNumber: "123",
              score: 1,
              safeties: 0,
              nineOnSnaps: 0,
              breakAndRuns: 0,
              currentlyUp: false
            },
            two: {
              name: "Player2",
              rank: 7,
              ballCount: "55",
              number: "987654",
              teamNumber: "456",
              score: 2,
              safeties: 0,
              nineOnSnaps: 0,
              breakAndRuns: 0,
              currentlyUp: true
            }
          },
          playerOneMatchPointsEarned: 20,
          playerTwoMatchPointsEarned: 0,
          currentGame: {
            player: {
              one: {
                score: 0,
                timeoutsTaken: 0,
                nineOnSnap: false,
                breakAndRun: false,
                ballsHitIn: [],
                deadBalls: [],
                lastBall: null
              },
              two: {
                score: 0,
                timeoutsTaken: 0,
                nineOnSnap: false,
                breakAndRun: false,
                ballsHitIn: [],
                deadBalls: [],
                lastBall: null
              }
            },
            numberOfInnings: 0,
            ended: false,
            onBreak: false,
            breakingPlayerStillShooting: false
          },
          completedGames: [
            {
              player: {
                one: {
                  score: 1,
                  timeoutsTaken: 0,
                  nineOnSnap: false,
                  breakAndRun: false,
                  ballsHitIn: [1],
                  deadBalls: [2],
                  lastBall: null
                },
                two: {
                  score: 2,
                  timeoutsTaken: 0,
                  nineOnSnap: false,
                  breakAndRun: false,
                  ballsHitIn: [9],
                  deadBalls: [3, 4, 5, 6, 7, 8],
                  lastBall: 9
                }
              },
              numberOfInnings: 0,
              ended: true,
              onBreak: false,
              breakingPlayerStillShooting: false
            }
          ],
          ended: false,
          originalId: 0,
          leagueMatchId: 0
        });
        expect(match.playerOneMatchPointsEarned).toEqual(20);
        expect(match.playerTwoMatchPointsEarned).toEqual(0);
        expect(match.ended).toEqual(false);
        expect(match.originalId).toEqual(0);
        expect(match.player.one.name).toEqual("Player1");
        expect(match.player.two.name).toEqual("Player2");
        expect(match.currentGame.breakingPlayerStillShooting).toEqual(false);
        expect(match.completedGames[0].breakingPlayerStillShooting).toEqual(false);
        return expect(match.completedGames[0].player.one.score).toEqual(1);
      });
      return it("should be able to take a completedGames JSON array and convert it to JS Array with Objects", function() {
        var completedGames;
        completedGames = match.completedGamesFromJSON([
          {
            player: {
              one: {
                score: 1,
                timeoutsTaken: 0,
                nineOnSnap: false,
                breakAndRun: false,
                ballsHitIn: [1],
                deadBalls: [2],
                lastBall: null
              },
              two: {
                score: 2,
                timeoutsTaken: 0,
                nineOnSnap: false,
                breakAndRun: false,
                ballsHitIn: [9],
                deadBalls: [3, 4, 5, 6, 7, 8],
                lastBall: 9
              }
            },
            numberOfInnings: 0,
            ended: true,
            onBreak: false,
            breakingPlayerStillShooting: false
          }
        ]);
        return expect(completedGames[0].player.one.score).toEqual(1);
      });
    });
  });

}).call(this);
