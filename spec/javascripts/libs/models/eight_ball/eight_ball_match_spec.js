// Generated by CoffeeScript 1.3.3
(function() {

  describe("Eight Ball Match", function() {
    var match;
    match = void 0;
    beforeEach(function() {
      var options;
      match = new $CS.Models.EightBall.Match(options = {
        playerOneName: "Player1",
        playerTwoName: "Player2",
        playerOneRank: 2,
        playerTwoRank: 7,
        playerOneNumber: "12345",
        playerTwoNumber: "987654",
        playerOneTeamNumber: "123",
        playerTwoTeamNumber: "456"
      });
      match.player.one.currentlyUp = true;
      match.completedGames = [];
      match.ended = false;
      match.originalId = 0;
      match.leagueMatchId = 0;
      match.playerNumberWinning = 0;
      match.playerOneWon = false;
      match.playerTwoWon = false;
      match.arePlayersSwitching = false;
      match.suddenDeath = false;
      match.forfeit = false;
      match.currentGame.numberOfInnings = 0;
      match.currentGame.player.one.eightOnSnap = false;
      match.currentGame.player.one.breakAndRun = false;
      match.currentGame.player.two.eightOnSnap = false;
      match.currentGame.player.two.breakAndRun = false;
      match.currentGame.player.one.ballType = null;
      match.currentGame.player.two.ballType = null;
      match.currentGame.player.one.eightBall = [];
      match.currentGame.player.two.eightBall = [];
      match.currentGame.playerOneWon = false;
      match.currentGame.playerTwoWon = false;
      match.currentGame.ended = false;
      match.currentGame.ballsHitIn.stripes = [];
      match.currentGame.ballsHitIn.solids = [];
      match.currentGame.lastBallHitIn = null;
      match.currentGame.onBreak = true;
      match.currentGame.breakingPlayerStillShooting = true;
      match.currentGame.player.one.callback().currentlyUp = true;
      return match.currentGame.player.two.callback().currentlyUp = false;
    });
    describe("Constructor", function() {
      it("should have 2 players", function() {
        expect(match.player.one.name).toEqual("Player1");
        expect(match.player.one.rank).toEqual(2);
        expect(match.player.one.number).toEqual("12345");
        expect(match.player.one.teamNumber).toEqual("123");
        expect(match.player.one.gamesNeededToWin).toEqual(2);
        expect(match.player.two.name).toEqual("Player2");
        expect(match.player.two.rank).toEqual(7);
        expect(match.player.two.number).toEqual("987654");
        expect(match.player.two.teamNumber).toEqual("456");
        return expect(match.player.two.gamesNeededToWin).toEqual(7);
      });
      it("should set Player 1 to break first", function() {
        return expect(match.player.one.currentlyUp).toEqual(true);
      });
      return it("should create the first Game and set it to currentGame", function() {
        return expect(match.currentGame).toNotEqual(null);
      });
    });
    describe("Scoring", function() {
      it("should accept a number for the ball that was hit in", function() {
        return match.scoreNumberedBall(1);
      });
      it("should add 1 to the respective ball type array when a ball is scored", function() {
        match.scoreNumberedBall(1);
        expect(match.currentGame.ballsHitIn.solids).toEqual([1]);
        match.scoreNumberedBall(12);
        return expect(match.currentGame.ballsHitIn.stripes).toEqual([12]);
      });
      it("should be able to get the total number of innings", function() {
        expect(match.getTotalInnings()).toEqual(0);
        match.shotMissed();
        match.shotMissed();
        match.shotMissed();
        match.shotMissed();
        expect(match.getTotalInnings()).toEqual(2);
        match.shotMissed();
        match.shotMissed();
        return expect(match.getTotalInnings()).toEqual(3);
      });
      it("should be able to hold on to the originalId from the database", function() {
        return expect(match.originalId).toEqual(0);
      });
      it("should be able to hold on to the leagueMatchId from the database", function() {
        return expect(match.leagueMatchId).toEqual(0);
      });
      it("should be able to put match into sudden death mode", function() {
        expect(match.suddenDeath).toEqual(false);
        expect(match.player.one.gamesNeededToWin).toEqual(2);
        expect(match.player.two.gamesNeededToWin).toEqual(7);
        match.setSuddenDeathMode();
        expect(match.suddenDeath).toEqual(true);
        expect(match.player.one.gamesNeededToWin).toEqual(1);
        return expect(match.player.two.gamesNeededToWin).toEqual(1);
      });
      it("should be able to know the current game number", function() {
        expect(match.getCurrentGameNumber()).toEqual(1);
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.startNewGame();
        return expect(match.getCurrentGameNumber()).toEqual(2);
      });
      it("should be able to get total number of safeties", function() {
        return expect(match.getTotalSafeties()).toEqual("0 to 0");
      });
      return it("should be able to hit a safety", function() {
        expect(match.getTotalSafeties()).toEqual("0 to 0");
        match.hitSafety();
        expect(match.getTotalSafeties()).toEqual("1 to 0");
        expect(match.player.one.safeties).toEqual(1);
        match.shotMissed();
        match.hitSafety();
        expect(match.getTotalSafeties()).toEqual("2 to 0");
        expect(match.player.two.safeties).toEqual(0);
        match.hitSafety();
        expect(match.getTotalSafeties()).toEqual("2 to 1");
        return expect(match.player.two.safeties).toEqual(1);
      });
    });
    describe("Match/Game Ending", function() {
      it("should know when the match is completed", function() {
        expect(match.getRemainingGamesNeededToWinByPlayer(1)).toEqual(2);
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        expect(match.getRemainingGamesNeededToWinByPlayer(1)).toEqual(1);
        expect(match.currentGame.ended).toEqual(true);
        expect(match.currentGame.playerOneWon).toEqual(true);
        expect(match.ended).toEqual(false);
        match.startNewGame();
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        expect(match.getRemainingGamesNeededToWinByPlayer(1)).toEqual(0);
        return expect(match.ended).toEqual(true);
      });
      it("should be able to find the remaining games needed to win for player one", function() {
        expect(match.getRemainingGamesNeededToWinByPlayer(1)).toEqual(2);
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        return expect(match.getRemainingGamesNeededToWinByPlayer(1)).toEqual(1);
      });
      it("should be able to find the remaining games needed to win for player two", function() {
        expect(match.getRemainingGamesNeededToWinByPlayer(2)).toEqual(7);
        match.shotMissed();
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.currentGame.setBallTypeByPlayer(2, 'solids');
        expect(match.currentGame.playerTwoWon).toEqual(true);
        return expect(match.getRemainingGamesNeededToWinByPlayer(2)).toEqual(6);
      });
      it("should add current game to the completedGames list and start a new Game when the game has completed", function() {
        expect(match.completedGames.length).toEqual(0);
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.startNewGame();
        expect(match.completedGames.length).toEqual(1);
        expect(match.currentGame.ended).toEqual(false);
        return expect(match.completedGames[0].ended).toEqual(true);
      });
      it("should know if the match is completed", function() {
        return expect(match.ended).toEqual(false);
      });
      it("should hold multiple completed games", function() {
        return expect(match.completedGames).toNotEqual(null);
      });
      return it("should be able to tell who won the entire match", function() {
        expect(match.playerOneWon).toEqual(false);
        expect(match.playerTwoWon).toEqual(false);
        match.scoreNumberedBall(8);
        match.startNewGame();
        match.scoreNumberedBall(8);
        expect(match.getRemainingGamesNeededToWinByPlayer(1)).toEqual(0);
        return expect(match.playerOneWon).toEqual(true);
      });
    });
    describe("Players", function() {
      it("should be able to have the rank changed and have the BallCounts and timeouts_allowed automatically", function() {
        expect(match.player.one.gamesNeededToWin).toEqual(2);
        expect(match.player.two.gamesNeededToWin).toEqual(7);
        expect(match.player.one.timeouts_allowed).toEqual(2);
        match.player.one.rank = 7;
        match.resetPlayerRankStats();
        expect(match.player.one.gamesNeededToWin).toEqual(5);
        expect(match.player.one.timeouts_allowed).toEqual(1);
        return expect(match.player.two.gamesNeededToWin).toEqual(5);
      });
      it("should change currently up player on missed shot", function() {
        expect(match.player.one.currentlyUp).toEqual(true);
        match.shotMissed();
        return expect(match.player.two.currentlyUp).toEqual(true);
      });
      it("should be able to get the player twos games won", function() {
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        expect(match.getGamesWonByPlayer(2)).toEqual(0);
        match.shotMissed();
        match.shotMissed();
        match.scoreNumberedBall(9);
        match.scoreNumberedBall(10);
        match.scoreNumberedBall(11);
        match.scoreNumberedBall(12);
        match.scoreNumberedBall(13);
        match.scoreNumberedBall(14);
        match.scoreNumberedBall(15);
        match.scoreNumberedBall(8);
        expect(match.getGamesWonByPlayer(2)).toEqual(1);
        match.startNewGame();
        expect(match.getGamesWonByPlayer(2)).toEqual(1);
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        return expect(match.getGamesWonByPlayer(2)).toEqual(2);
      });
      it("should be able to get the the games won. (example 2-0)", function() {
        expect(match.getMatchPoints()).toEqual("TIE");
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        expect(match.getMatchPoints()).toEqual("TIE");
        match.shotMissed();
        match.shotMissed();
        match.scoreNumberedBall(9);
        match.scoreNumberedBall(10);
        match.scoreNumberedBall(11);
        match.scoreNumberedBall(12);
        match.scoreNumberedBall(13);
        match.scoreNumberedBall(14);
        match.scoreNumberedBall(15);
        match.scoreNumberedBall(8);
        match.startNewGame();
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.scoreNumberedBall(9);
        match.startNewGame();
        match.scoreNumberedBall(1);
        return expect(match.getMatchPoints()).toEqual("0-1");
      });
      it("should be able to get the winning player", function() {
        match.scoreNumberedBall(1);
        match.scoreNumberedBall(2);
        match.scoreNumberedBall(3);
        match.scoreNumberedBall(4);
        match.scoreNumberedBall(5);
        match.scoreNumberedBall(6);
        match.scoreNumberedBall(7);
        match.scoreNumberedBall(8);
        match.startNewGame();
        return expect(match.getWinningPlayer().name).toEqual("Player1");
      });
      it("should be able to return the match points for player one", function() {
        expect(match.getMatchPointsByPlayer(1)).toEqual(0);
        match.scoreNumberedBall(8);
        return expect(match.getMatchPointsByPlayer(1)).toEqual(1);
      });
      it("should be able to return the match points for player two", function() {
        expect(match.getMatchPointsByPlayer(2)).toEqual(0);
        match.currentGame.breakIsOver();
        match.shotMissed();
        match.scoreNumberedBall(8);
        match.startNewGame();
        match.currentGame.breakIsOver();
        match.scoreNumberedBall(8);
        match.startNewGame();
        match.currentGame.breakIsOver();
        match.scoreNumberedBall(8);
        match.startNewGame();
        match.currentGame.breakIsOver();
        match.scoreNumberedBall(8);
        match.startNewGame();
        match.currentGame.breakIsOver();
        match.scoreNumberedBall(8);
        return expect(match.getMatchPointsByPlayer(2)).toEqual(1);
      });
      it("should be able to know when the last thing that happened was a player switch", function() {
        expect(match.arePlayersSwitching).toEqual(false);
        match.shotMissed();
        expect(match.arePlayersSwitching).toEqual(true);
        match.scoreNumberedBall(1);
        return expect(match.arePlayersSwitching).toEqual(false);
      });
      it("should switch players if eight ball is hit in without all other 7 balls", function() {
        match.shotMissed();
        expect(match.player.two.currentlyUp).toEqual(true);
        expect(match.player.one.currentlyUp).toEqual(false);
        match.scoreNumberedBall(8);
        expect(match.player.one.currentlyUp).toEqual(true);
        return expect(match.player.two.currentlyUp).toEqual(false);
      });
      return it("should reset Timeouts taken for each player when a game has ended", function() {
        expect(match.currentGame.player.one.timeoutsTaken).toEqual(0);
        expect(match.currentGame.player.two.timeoutsTaken).toEqual(0);
        match.currentGame.takeTimeout();
        expect(match.currentGame.player.one.timeoutsTaken).toEqual(1);
        match.shotMissed();
        match.currentGame.takeTimeout();
        expect(match.currentGame.player.two.timeoutsTaken).toEqual(1);
        match.scoreNumberedBall(8);
        match.startNewGame();
        expect(match.currentGame.player.one.timeoutsTaken).toEqual(0);
        return expect(match.currentGame.player.two.timeoutsTaken).toEqual(0);
      });
    });
    return describe("toJSON/fromJSON", function() {
      it("should be able to take a new Match and turn it into a JSON object", function() {
        return expect(match.toJSON()).toEqual({
          player: {
            one: {
              name: "Player1",
              rank: 2,
              gamesNeededToWin: 2,
              number: "12345",
              teamNumber: "123",
              gamesWon: 0,
              safeties: 0,
              eightOnSnaps: 0,
              breakAndRuns: 0,
              currentlyUp: true
            },
            two: {
              name: "Player2",
              rank: 7,
              gamesNeededToWin: 7,
              number: "987654",
              teamNumber: "456",
              gamesWon: 0,
              safeties: 0,
              eightOnSnaps: 0,
              breakAndRuns: 0,
              currentlyUp: false
            }
          },
          playerOneWon: 0,
          playerTwoWon: 0,
          currentGame: {
            playerOneTimeoutsTaken: 0,
            playerTwoTimeoutsTaken: 0,
            playerOneEightOnSnap: false,
            playerOneBreakAndRun: false,
            playerTwoEightOnSnap: false,
            playerTwoBreakAndRun: false,
            playerOneBallType: null,
            playerTwoBallType: null,
            playerOneEightBall: [],
            playerTwoEightBall: [],
            playerOneWon: false,
            playerTwoWon: false,
            numberOfInnings: 0,
            earlyEight: false,
            scratchOnEight: false,
            breakingPlayerStillShooting: true,
            stripedBallsHitIn: [],
            solidBallsHitIn: [],
            lastBallHitIn: null,
            onBreak: true,
            ended: false
          },
          completedGames: [],
          suddenDeath: false,
          forfeit: false,
          ended: false,
          originalId: 0,
          leagueMatchId: 0
        });
      });
      it("should be able to take a filled Match and turn it into a JSON object", function() {
        match.scoreNumberedBall(1);
        match.shotMissed();
        match.scoreNumberedBall(12);
        match.shotMissed();
        match.scoreNumberedBall(8);
        match.startNewGame();
        return expect(match.toJSON()).toEqual({
          player: {
            one: {
              name: "Player1",
              rank: 2,
              gamesNeededToWin: 2,
              number: "12345",
              teamNumber: "123",
              gamesWon: 1,
              safeties: 0,
              eightOnSnaps: 0,
              breakAndRuns: 0,
              currentlyUp: true
            },
            two: {
              name: "Player2",
              rank: 7,
              gamesNeededToWin: 7,
              number: "987654",
              teamNumber: "456",
              gamesWon: 0,
              safeties: 0,
              eightOnSnaps: 0,
              breakAndRuns: 0,
              currentlyUp: false
            }
          },
          playerOneWon: 1,
          playerTwoWon: 0,
          currentGame: {
            playerOneTimeoutsTaken: 0,
            playerTwoTimeoutsTaken: 0,
            playerOneEightOnSnap: false,
            playerOneBreakAndRun: false,
            playerTwoEightOnSnap: false,
            playerTwoBreakAndRun: false,
            playerOneBallType: null,
            playerTwoBallType: null,
            playerOneEightBall: [],
            playerTwoEightBall: [8],
            playerOneWon: false,
            playerTwoWon: false,
            numberOfInnings: 0,
            earlyEight: false,
            scratchOnEight: false,
            breakingPlayerStillShooting: true,
            stripedBallsHitIn: [12],
            solidBallsHitIn: [1],
            lastBallHitIn: null,
            onBreak: true,
            ended: false
          },
          completedGames: [
            {
              playerOneTimeoutsTaken: 0,
              playerTwoTimeoutsTaken: 0,
              playerOneEightOnSnap: false,
              playerOneBreakAndRun: false,
              playerTwoEightOnSnap: false,
              playerTwoBreakAndRun: false,
              playerOneBallType: null,
              playerTwoBallType: null,
              playerOneEightBall: [],
              playerTwoEightBall: [8],
              playerOneWon: true,
              playerTwoWon: false,
              numberOfInnings: 0,
              earlyEight: true,
              scratchOnEight: false,
              breakingPlayerStillShooting: false,
              stripedBallsHitIn: [12],
              solidBallsHitIn: [1],
              lastBallHitIn: 8,
              onBreak: false,
              ended: true
            }
          ],
          suddenDeath: false,
          forfeit: false,
          ended: false,
          originalId: 0,
          leagueMatchId: 0
        });
      });
      it("should be able to put a matches completed games into a JSON object", function() {
        match.scoreNumberedBall(1);
        match.shotMissed();
        match.scoreNumberedBall(15);
        match.shotMissed();
        match.scoreNumberedBall(8);
        match.startNewGame();
        return expect(match.completedGamesToJSON()).toEqual([
          {
            playerOneTimeoutsTaken: 0,
            playerTwoTimeoutsTaken: 0,
            playerOneEightOnSnap: false,
            playerOneBreakAndRun: false,
            playerTwoEightOnSnap: false,
            playerTwoBreakAndRun: false,
            playerOneBallType: null,
            playerTwoBallType: null,
            playerOneEightBall: [],
            playerTwoEightBall: [8],
            playerOneWon: true,
            playerTwoWon: false,
            numberOfInnings: 0,
            earlyEight: true,
            scratchOnEight: false,
            breakingPlayerStillShooting: false,
            stripedBallsHitIn: [15],
            solidBallsHitIn: [1],
            lastBallHitIn: 8,
            onBreak: false,
            ended: true
          }
        ]);
      });
      it("should be able to take a Player JSON and fill a Player object and return it", function() {
        var player;
        player = match.playerFromJSON({
          name: "James Armstead",
          rank: 2,
          gamesNeededToWin: 0,
          number: "4321",
          teamNumber: "789",
          gamesWon: 1,
          safeties: 1,
          eightOnSnaps: 2,
          breakAndRuns: 3,
          currentlyUp: true
        });
        expect(player.name).toEqual("James Armstead");
        expect(player.rank).toEqual(2);
        expect(player.number).toEqual("4321");
        expect(player.teamNumber).toEqual("789");
        expect(player.gamesWon).toEqual(1);
        expect(player.safeties).toEqual(1);
        expect(player.eightOnSnaps).toEqual(2);
        expect(player.breakAndRuns).toEqual(3);
        expect(player.currentlyUp).toEqual(true);
        player.addToEightOnSnaps(1);
        return expect(player.eightOnSnaps).toEqual(3);
      });
      it("should be able to take a Match JSON and fill its values", function() {
        match.fromJSON({
          player: {
            one: {
              name: "Player1",
              rank: 2,
              gamesNeededToWin: 2,
              number: "12345",
              teamNumber: "123",
              gamesWon: 0,
              safeties: 0,
              eightOnSnaps: 0,
              breakAndRuns: 0,
              currentlyUp: true
            },
            two: {
              name: "Player2",
              rank: 7,
              gamesNeededToWin: 7,
              number: "987654",
              teamNumber: "456",
              gamesWon: 0,
              safeties: 0,
              eightOnSnaps: 0,
              breakAndRuns: 0,
              currentlyUp: false
            }
          },
          playerOneWon: 3,
          playerTwoWon: 0,
          currentGame: {
            playerOneTimeoutsTaken: 2,
            playerTwoTimeoutsTaken: 0,
            playerOneEightOnSnap: false,
            playerOneBreakAndRun: true,
            playerTwoEightOnSnap: false,
            playerTwoBreakAndRun: false,
            playerOneBallType: 2,
            playerTwoBallType: 1,
            playerOneEightBall: [8],
            playerTwoEightBall: [],
            playerOneWon: true,
            playerTwoWon: false,
            numberOfInnings: 0,
            earlyEight: false,
            scratchOnEight: false,
            breakingPlayerStillShooting: true,
            stripedBallsHitIn: [12, 9, 10, 11, 13, 14, 15],
            solidBallsHitIn: [1, 2, 3, 4, 5, 6, 7],
            lastBallHitIn: null,
            onBreak: true,
            ended: false
          },
          completedGames: [
            {
              playerOneTimeoutsTaken: 2,
              playerTwoTimeoutsTaken: 0,
              playerOneEightOnSnap: false,
              playerOneBreakAndRun: true,
              playerTwoEightOnSnap: false,
              playerTwoBreakAndRun: false,
              playerOneBallType: 2,
              playerTwoBallType: 1,
              playerOneEightBall: [8],
              playerTwoEightBall: [],
              playerOneWon: true,
              playerTwoWon: false,
              numberOfInnings: 0,
              earlyEight: false,
              scratchOnEight: false,
              breakingPlayerStillShooting: false,
              stripedBallsHitIn: [12, 9, 10, 11, 13, 14, 15],
              solidBallsHitIn: [1, 2, 3, 4, 5, 6, 7],
              lastBallHitIn: 8,
              onBreak: true,
              ended: true
            }, {
              playerOneTimeoutsTaken: 2,
              playerTwoTimeoutsTaken: 0,
              playerOneEightOnSnap: false,
              playerOneBreakAndRun: true,
              playerTwoEightOnSnap: false,
              playerTwoBreakAndRun: false,
              playerOneBallType: 2,
              playerTwoBallType: 1,
              playerOneEightBall: [8],
              playerTwoEightBall: [],
              playerOneWon: true,
              playerTwoWon: false,
              numberOfInnings: 0,
              earlyEight: false,
              scratchOnEight: false,
              breakingPlayerStillShooting: false,
              stripedBallsHitIn: [12, 9, 10, 11, 13, 14, 15],
              solidBallsHitIn: [1, 2, 3, 4, 5, 6, 7],
              lastBallHitIn: 15,
              onBreak: false,
              ended: true
            }
          ],
          suddenDeath: false,
          forfeit: false,
          ended: false,
          originalId: 0,
          leagueMatchId: 0
        });
        expect(match.getGamesWonByPlayer(1)).toEqual(3);
        expect(match.getGamesWonByPlayer(2)).toEqual(0);
        expect(match.ended).toEqual(false);
        expect(match.originalId).toEqual(0);
        expect(match.player.one.name).toEqual("Player1");
        expect(match.player.two.name).toEqual("Player2");
        expect(match.currentGame.breakingPlayerStillShooting).toEqual(true);
        expect(match.completedGames[0].breakingPlayerStillShooting).toEqual(false);
        expect(match.completedGames[0].playerOneWon).toEqual(true);
        return expect(match.player.one.getGamesNeededToWin()).toEqual("2");
      });
      return it("should be able to take a completedGames JSON array and convert it to JS Array with Objects", function() {
        var completedGames;
        completedGames = match.completedGamesFromJSON([
          {
            playerOneTimeoutsTaken: 0,
            playerTwoTimeoutsTaken: 0,
            numberOfInnings: 0,
            playerOneEightOnSnap: false,
            playerOneBreakAndRun: false,
            playerTwoEightOnSnap: false,
            playerTwoBreakAndRun: false,
            playerOneBallType: 1,
            playerTwoBallType: null,
            playerOneEightBall: [],
            playerTwoEightBall: [8],
            playerOneWon: true,
            playerTwoWon: false,
            ended: true,
            stripedBallsHitIn: [1],
            solidBallsHitIn: [12],
            lastBallHitIn: 12,
            onBreak: false,
            breakingPlayerStillShooting: false
          }
        ]);
        expect(completedGames[0].getBallsHitInByPlayer(1)).toEqual([1]);
        return expect(completedGames[0].playerOneWon).toEqual(true);
      });
    });
  });

}).call(this);
