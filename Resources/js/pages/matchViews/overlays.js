// Generated by CoffeeScript 1.3.1
(function() {
  var me, whoIsBreakingPlayerOneButtonClick, whoIsBreakingPlayerTwoButtonClick;

  me = this;

  this.winnerOverlayContainer = Ti.UI.createImageView({
    backgroundImage: "images/match/layout/bg-endgame.png",
    backgroundColor: "transparent",
    top: 44,
    left: 0,
    height: getPlatformHeight() - 44,
    width: getPlatformWidth(),
    visible: false
  });

  this.winnerOverlayContainer.visible = false;

  this.winnerOverlay = Ti.UI.createView({
    backgroundColor: "transparent",
    top: 155,
    width: 215,
    height: 174,
    isNinePatch: false,
    visible: false
  });

  this.greyOverlay = Ti.UI.createView({
    backgroundColor: "transparent",
    backgroundImage: "images/match/layout/notification-endgame-winner.png",
    top: 0,
    width: 215,
    height: 57,
    isNinePatch: false
  });

  this.nameOfWinnerLabel = Ti.UI.createLabel({
    text: "",
    color: "#FCD21C",
    top: 3,
    width: 215,
    height: 30,
    textAlign: "center",
    font: {
      fontSize: 27,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.winnerOfGameNumberLabel = Ti.UI.createLabel({
    text: "wins game " + this.currentMatch.getCurrentGameNumber(),
    color: "#ffffff",
    height: 20,
    width: 215,
    top: 34,
    textAlign: "center",
    font: {
      fontSize: 12,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.greyOverlay.add(this.nameOfWinnerLabel);

  this.greyOverlay.add(this.winnerOfGameNumberLabel);

  this.continueMatchButton = Ti.UI.createButton({
    backgroundImage: "images/match/buttons/btn-continue-match.png",
    top: 71,
    width: 166,
    height: 39,
    color: "#ffffff",
    shadowColor: "#000000",
    shadowOffset: {
      x: 1,
      y: 1
    },
    title: "Continue Match",
    font: {
      fontSize: 15,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    },
    isNinePatch: false
  });

  this.editHistoryButton = Ti.UI.createButton({
    backgroundImage: "images/match/buttons/btn-edit-history.png",
    top: 116,
    width: 114,
    height: 27,
    color: "#ffffff",
    shadowColor: "#000000",
    shadowOffset: {
      x: 1,
      y: 1
    },
    title: "Edit History",
    font: {
      fontSize: 12,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    },
    isNinePatch: false
  });

  continueMatchButton.addEventListener("click", function() {
    me.winnerOverlay.visible = false;
    me.winnerOverlayContainer.visible = false;
    me.currentMatch.startNewGame();
    return me.updateUI();
  });

  this.winnerOverlay.add(this.greyOverlay);

  this.winnerOverlay.add(this.continueMatchButton);

  this.winnerOverlay.add(this.editHistoryButton);

  this.view.add(this.winnerOverlayContainer);

  this.view.add(this.winnerOverlay);

  this.showFinishedGameOverlay = function() {
    this.nameOfWinnerLabel.text = this.currentMatch.CurrentGame.getWinningPlayerName();
    if (this.nameOfWinnerLabel.text !== "Tie") {
      this.winnerOfGameNumberLabel.text = "wins game " + this.currentMatch.getCurrentGameNumber();
    } else {
      this.winnerOfGameNumberLabel.text = "Game " + this.currentMatch.getCurrentGameNumber() + " ends in a Tie.";
    }
    this.winnerOverlay.visible = true;
    return this.winnerOverlayContainer.visible = true;
  };

  this.hideFinishedGameOverlay = function() {
    this.winnerOverlay.visible = false;
    return this.winnerOverlayContainer.visible = false;
  };

  this.matchFinishedOverlayContainer = Ti.UI.createView({
    backgroundImage: (Ti.Platform.name !== "android" ? "images/match/layout/bg-menus-iphone.png" : "images/match/layout/bg-menus-android.png"),
    backgroundColor: "transparent",
    top: 44,
    left: 0,
    height: getPlatformHeight() - 44,
    width: getPlatformWidth()
  });

  this.matchFinishedOverlayContainer.visible = false;

  this.matchFinishedLabel = Ti.UI.createLabel({
    text: "",
    color: "#ffffff",
    height: 40,
    width: 300,
    top: 18,
    textAlign: "center",
    font: {
      fontSize: 25,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchFinishedTrophyContainer = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-endmatch-trophy.png",
    backgroundColor: "transparent",
    top: 70,
    left: 30,
    height: 279,
    width: 266
  });

  this.matchFinishedTrophy = Ti.UI.createView({
    backgroundImage: "images/match/icons/endmatch-trophy.png",
    backgroundColor: "transparent",
    top: 15,
    left: 45,
    height: 246,
    width: 224
  });

  this.matchFinishedTrophyContainer.add(this.matchFinishedTrophy);

  this.matchFinishedMatchResultsButton = Ti.UI.createView({
    backgroundImage: "images/match/buttons/btn-startmatch.png",
    height: 39,
    width: 166,
    bottom: 18
  });

  this.matchFinishedMatchResultsButtonLabel = Ti.UI.createLabel({
    text: "Match Results",
    color: "#ffffff",
    top: 8,
    left: 0,
    height: 20,
    width: 166,
    textAlign: "center",
    font: {
      fontSize: 14,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchFinishedMatchResultsButton.add(this.matchFinishedMatchResultsButtonLabel);

  matchFinishedMatchResultsButton.addEventListener("click", function() {
    me.currentMatchAtResults();
    return me.updateUI();
  });

  this.matchFinishedOverlayContainer.add(this.matchFinishedTrophyContainer);

  this.matchFinishedOverlayContainer.add(this.matchFinishedMatchResultsButton);

  this.matchFinishedOverlayContainer.add(this.matchFinishedLabel);

  this.view.add(this.matchFinishedOverlayContainer);

  this.showMatchFinishedOverlay = function() {
    this.matchFinishedLabel.text = this.currentMatch.getWinningPlayer().getFirstNameWithInitials() + " Wins!";
    return this.matchFinishedOverlayContainer.visible = true;
  };

  this.hideMatchFinishedOverlay = function() {
    return this.matchFinishedOverlayContainer.visible = false;
  };

  this.matchResultsOverlayContainer = Ti.UI.createView({
    backgroundImage: (Ti.Platform.name !== "android" ? "images/match/layout/bg-menus-iphone.png" : "images/match/layout/bg-menus-android.png"),
    backgroundColor: "transparent",
    top: 44,
    left: 0,
    height: getPlatformHeight() - 44,
    width: getPlatformWidth()
  });

  this.matchResultsOverlayContainer.visible = false;

  this.matchResultsLabel = Ti.UI.createLabel({
    text: "",
    color: "#ffffff",
    height: 40,
    width: 300,
    top: 18,
    textAlign: "center",
    font: {
      fontSize: 25,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsTable = Ti.UI.createView({
    backgroundColor: "transparent",
    height: 279,
    width: 266,
    top: 65
  });

  this.matchResultsPlayerOneTable = Ti.UI.createImageView({
    backgroundImage: "images/match/layout/bg-matchresults-table-playerone.png",
    height: 279,
    width: 266,
    visible: false
  });

  this.matchResultsPlayerTwoTable = Ti.UI.createImageView({
    backgroundImage: "images/match/layout/bg-matchresults-table-playertwo.png",
    height: 279,
    width: 266,
    visible: false
  });

  this.matchResultsPlayerOneWinnerNameLabel = Ti.UI.createLabel({
    text: "",
    color: "#ffffff",
    top: 7,
    left: 10,
    height: 20,
    width: 90,
    textAlign: "left",
    font: {
      fontSize: 15,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsPlayerTwoWinnerNameLabel = Ti.UI.createLabel({
    text: "",
    color: "#ffffff",
    top: 7,
    right: 10,
    height: 20,
    width: 90,
    textAlign: "right",
    font: {
      fontSize: 15,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsWinnerBall = Ti.UI.createImageView({
    backgroundImage: "images/match/icons/icon-endmatch-9ball-small.png",
    backgroundColor: "transparent",
    top: 0,
    height: 31,
    width: 31
  });

  this.matchResultsTotalScoreView = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-matchresults-smalltitles.png",
    height: 30,
    width: 110,
    top: 43
  });

  this.matchResultsTotalScoreLabel = Ti.UI.createLabel({
    text: "Total Score",
    color: "#ffffff",
    top: 5,
    left: 0,
    height: 20,
    width: 110,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsTotalScoreView.add(this.matchResultsTotalScoreLabel);

  this.matchResultsTotalPlayerOneScore = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 35,
    left: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsTotalPlayerTwoScore = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 35,
    right: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsMatchPointsView = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-matchresults-smalltitles.png",
    height: 30,
    width: 110,
    top: 82
  });

  this.matchResultsMatchPointsLabel = Ti.UI.createLabel({
    text: "Match Points",
    color: "#ffffff",
    top: 5,
    left: 0,
    height: 20,
    width: 110,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsMatchPointsView.add(this.matchResultsMatchPointsLabel);

  this.matchResultsMatchPlayerOnePoints = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 74,
    left: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsMatchPlayerTwoPoints = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 74,
    right: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsSafetiesView = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-matchresults-smalltitles.png",
    height: 30,
    width: 110,
    top: 121
  });

  this.matchResultsSafetiesLabel = Ti.UI.createLabel({
    text: "Safeties",
    color: "#ffffff",
    top: 5,
    left: 0,
    height: 20,
    width: 110,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsSafetiesView.add(this.matchResultsSafetiesLabel);

  this.matchResultsPlayerOneSafeties = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 113,
    left: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsPlayerTwoSafeties = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 113,
    right: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsNineSnapView = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-matchresults-smalltitles.png",
    height: 30,
    width: 110,
    top: 160
  });

  this.matchResultsNineSnapLabel = Ti.UI.createLabel({
    text: (this.leagueMatch.GameType === "NineBall" ? "9 Snaps" : "8 Snaps"),
    color: "#ffffff",
    top: 5,
    left: 0,
    height: 20,
    width: 110,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsNineSnapView.add(this.matchResultsNineSnapLabel);

  this.matchResultsPlayerOneNineOnSnaps = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 152,
    left: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsPlayerTwoNineOnSnaps = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 152,
    right: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsBreakAndRunView = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-matchresults-smalltitles.png",
    height: 30,
    width: 110,
    top: 199
  });

  this.matchResultsBreakAndRunLabel = Ti.UI.createLabel({
    text: "Break & Runs",
    color: "#ffffff",
    top: 5,
    left: 0,
    height: 20,
    width: 110,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsBreakAndRunView.add(this.matchResultsBreakAndRunLabel);

  this.matchResultsPlayerOneBreakAndRuns = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 191,
    left: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsPlayerTwoBreakAndRuns = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 191,
    right: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsInningsAndDeadballsView = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-matchresults-inning-deadball.png",
    height: 30,
    width: 226,
    top: 238
  });

  this.matchResultsInningsScore = Ti.UI.createLabel({
    text: "",
    color: "#afd5f1",
    top: 6,
    left: 0,
    height: 20,
    width: 44,
    textAlign: "right",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsInningsLabel = Ti.UI.createLabel({
    text: "Innings",
    color: "#ffffff",
    top: 6,
    left: 49,
    height: 20,
    width: 49,
    textAlign: "left",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsDeadBallScore = Ti.UI.createLabel({
    text: "",
    color: "#afd5f1",
    top: 6,
    left: 98,
    height: 20,
    width: 27,
    textAlign: "right",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsDeadBallLabel = Ti.UI.createLabel({
    text: "Dead Balls",
    color: "#ffffff",
    top: 6,
    left: 130,
    height: 20,
    width: 74,
    textAlign: "left",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsEditButton = Ti.UI.createView({
    backgroundColor: "transparent",
    backgroundImage: "images/match/buttons/btn-edit-match.png",
    top: 354,
    left: 50,
    width: 104,
    height: 27,
    isNinePatch: false
  });

  this.matchResultsEditButtonLabel = Ti.UI.createLabel({
    text: "Edit Match",
    color: "#ffffff",
    left: 18,
    shadowColor: "#000000",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsEditButton.add(this.matchResultsEditButtonLabel);

  this.matchResultsMainMenuButton = Ti.UI.createView({
    backgroundColor: "transparent",
    backgroundImage: "images/match/buttons/btn-main-menu.png",
    top: 354,
    right: 50,
    width: 104,
    height: 27,
    isNinePatch: false
  });

  this.matchResultsMainMenuButtonLabel = Ti.UI.createLabel({
    text: "Main Menu",
    color: "#ffffff",
    left: 16,
    shadowColor: "#000000",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchResultsMainMenuButton.add(this.matchResultsMainMenuButtonLabel);

  this.leagueMatchResultsLeagueMatchResultsButton = Ti.UI.createView({
    backgroundImage: "images/match/buttons/btn-sign-scoresheets.png",
    top: 354,
    width: 131,
    height: 27,
    isNinePatch: false
  });

  this.leagueMatchResultsLeagueMatchResultsButtonLabel = Ti.UI.createLabel({
    text: "Overall Results",
    color: "#ffffff",
    left: 12,
    shadowColor: "#000000",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsLeagueMatchResultsButton.visible = false;

  this.leagueMatchResultsLeagueMatchResultsButton.add(this.leagueMatchResultsLeagueMatchResultsButtonLabel);

  this.leagueMatchResultsLeagueMatchResultsButton.addEventListener("click", function() {
    return me.showLeagueMatchResultsOverlay();
  });

  this.matchResultsMainMenuButtonClick = function() {
    return me.matchWindow.close();
  };

  this.matchResultsMainMenuButtonLabel.addEventListener("click", matchResultsMainMenuButtonClick);

  this.matchResultsInningsAndDeadballsView.add(this.matchResultsInningsScore);

  this.matchResultsInningsAndDeadballsView.add(this.matchResultsInningsLabel);

  this.matchResultsInningsAndDeadballsView.add(this.matchResultsDeadBallScore);

  this.matchResultsInningsAndDeadballsView.add(this.matchResultsDeadBallLabel);

  this.matchResultsTable.add(this.matchResultsPlayerOneTable);

  this.matchResultsTable.add(this.matchResultsPlayerTwoTable);

  this.matchResultsTable.add(this.matchResultsPlayerOneWinnerNameLabel);

  this.matchResultsTable.add(this.matchResultsPlayerTwoWinnerNameLabel);

  this.matchResultsTable.add(this.matchResultsWinnerBall);

  this.matchResultsTable.add(this.matchResultsTotalScoreView);

  this.matchResultsTable.add(this.matchResultsTotalPlayerOneScore);

  this.matchResultsTable.add(this.matchResultsTotalPlayerTwoScore);

  this.matchResultsTable.add(this.matchResultsMatchPointsView);

  this.matchResultsTable.add(this.matchResultsMatchPlayerOnePoints);

  this.matchResultsTable.add(this.matchResultsMatchPlayerTwoPoints);

  this.matchResultsTable.add(this.matchResultsSafetiesView);

  this.matchResultsTable.add(this.matchResultsPlayerOneSafeties);

  this.matchResultsTable.add(this.matchResultsPlayerTwoSafeties);

  this.matchResultsTable.add(this.matchResultsNineSnapView);

  this.matchResultsTable.add(this.matchResultsPlayerOneNineOnSnaps);

  this.matchResultsTable.add(this.matchResultsPlayerTwoNineOnSnaps);

  this.matchResultsTable.add(this.matchResultsBreakAndRunView);

  this.matchResultsTable.add(this.matchResultsPlayerOneBreakAndRuns);

  this.matchResultsTable.add(this.matchResultsPlayerTwoBreakAndRuns);

  this.matchResultsTable.add(this.matchResultsInningsAndDeadballsView);

  this.matchResultsOverlayContainer.add(this.matchResultsLabel);

  this.matchResultsOverlayContainer.add(this.matchResultsTable);

  this.matchResultsOverlayContainer.add(this.matchResultsEditButton);

  this.matchResultsOverlayContainer.add(this.matchResultsMainMenuButton);

  this.matchResultsOverlayContainer.add(this.leagueMatchResultsLeagueMatchResultsButton);

  this.view.add(this.matchResultsOverlayContainer);

  this.showMatchResultsOverlay = function() {
    this.matchResultsLabel.text = "Match " + this.currentMatchNumber + " Results";
    this.matchResultsPlayerOneTable.visible = this.currentMatch.isPlayerOneWinning();
    this.matchResultsPlayerTwoTable.visible = this.currentMatch.isPlayerTwoWinning();
    if (this.currentMatch.isPlayerOneWinning()) {
      this.matchResultsWinnerBall.left = 75;
    } else {
      this.matchResultsWinnerBall.left = 150;
    }
    this.matchResultsPlayerOneWinnerNameLabel.text = this.currentMatch.PlayerOne.getFirstNameWithInitials();
    this.matchResultsPlayerTwoWinnerNameLabel.text = this.currentMatch.PlayerTwo.getFirstNameWithInitials();
    this.matchResultsDeadBallScore.text = (this.leagueMatch.GameType === "NineBall" ? this.currentMatch.getTotalDeadBalls() : "0");
    this.matchResultsInningsScore.text = this.currentMatch.getTotalInnings();
    this.matchResultsTotalPlayerOneScore.text = (this.leagueMatch.GameType === "NineBall" ? this.currentMatch.PlayerOne.Score.toString() : this.currentMatch.getPlayerOneGamesWon().toString());
    this.matchResultsTotalPlayerTwoScore.text = (this.leagueMatch.GameType === "NineBall" ? this.currentMatch.PlayerTwo.Score.toString() : this.currentMatch.getPlayerTwoGamesWon().toString());
    this.matchResultsMatchPlayerOnePoints.text = this.currentMatch.getPlayerOneMatchPoints().toString();
    this.matchResultsMatchPlayerTwoPoints.text = this.currentMatch.getPlayerTwoMatchPoints().toString();
    this.matchResultsPlayerOneSafeties.text = this.currentMatch.PlayerOne.Safeties.toString();
    this.matchResultsPlayerTwoSafeties.text = this.currentMatch.PlayerTwo.Safeties.toString();
    this.matchResultsPlayerOneNineOnSnaps.text = (this.leagueMatch.GameType === "NineBall" ? this.currentMatch.PlayerOne.NineOnSnaps.toString() : this.currentMatch.PlayerOne.EightOnSnaps.toString());
    this.matchResultsPlayerTwoNineOnSnaps.text = (this.leagueMatch.GameType === "NineBall" ? this.currentMatch.PlayerTwo.NineOnSnaps.toString() : this.currentMatch.PlayerTwo.EightOnSnaps.toString());
    this.matchResultsPlayerOneBreakAndRuns.text = this.currentMatch.PlayerOne.BreakAndRuns.toString();
    this.matchResultsPlayerTwoBreakAndRuns.text = this.currentMatch.PlayerTwo.BreakAndRuns.toString();
    if (this.leagueMatch.Ended() === true) {
      this.matchResultsEditButton.visible = false;
      this.matchResultsMainMenuButton.visible = false;
      this.leagueMatchResultsLeagueMatchResultsButton.visible = true;
    }
    return this.matchResultsOverlayContainer.visible = true;
  };

  this.hideMatchResultsOverlay = function() {
    return this.matchResultsOverlayContainer.visible = false;
  };

  this.matchResultsShowSignatureButton = function() {
    return this.matchResultsMainMenuButtonLabel.text = "Sign Match";
  };

  this.matchResultsShowMainMenuButton = function() {
    return this.matchResultsMainMenuButtonLabel.text = "Main Menu";
  };

  this.startMatchOverlayContainer = Ti.UI.createView({
    backgroundImage: (Ti.Platform.name !== "android" ? "images/match/layout/bg-menus-iphone.png" : "images/match/layout/bg-menus-android.png"),
    top: 44,
    left: 0,
    height: getPlatformHeight() - 44,
    width: getPlatformWidth(),
    visible: false
  });

  this.startMatchTable = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-startmatch-players.png",
    height: 85,
    width: 266,
    top: 25
  });

  this.playerVsLabel = Ti.UI.createLabel({
    text: "VS",
    color: "#ffffff",
    top: 3,
    left: 0,
    height: 20,
    width: 266,
    textAlign: "center",
    font: {
      fontSize: 15,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.playerOneStartNameLabel = Ti.UI.createLabel({
    text: "",
    color: "#ffffff",
    top: 3,
    left: 10,
    height: 20,
    width: 80,
    textAlign: "left",
    font: {
      fontSize: 15,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.playerTwoStartNameLabel = Ti.UI.createLabel({
    text: "",
    color: "#ffffff",
    top: 3,
    right: 10,
    height: 20,
    width: 85,
    textAlign: "right",
    font: {
      fontSize: 15,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchPointsNeededToWinView = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-startmatch-pointstowin.png",
    height: 34,
    width: 110,
    top: 40
  });

  this.matchPointsNeededToWinLabel = Ti.UI.createLabel({
    text: (this.leagueMatch.GameType === "NineBall" ? "Points to Win" : "Games to Win"),
    color: "#ffffff",
    top: 6,
    left: 0,
    height: 20,
    width: 110,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.matchPointsNeededToWinView.add(this.matchPointsNeededToWinLabel);

  this.startMatchPlayerOnePoints = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 35,
    left: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.startMatchPlayerTwoPoints = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 35,
    right: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.whoIsBreakingLabel = Ti.UI.createLabel({
    text: "Who Breaks First?",
    color: "#ffffff",
    height: 30,
    width: 300,
    top: 117,
    textAlign: "center",
    font: {
      fontSize: 22,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.whoIsBreakingSelectorTableBG = Ti.UI.createView({
    backgroundColor: "#0e1115",
    top: 7,
    left: 0,
    height: 64,
    width: 262
  });

  this.whoIsBreakingSelectorTableBGTop = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg_menu_container_top.png",
    top: 0,
    left: 0,
    height: 7,
    width: 262
  });

  this.whoIsBreakingSelectorTableBGBottom = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg_menu_container_bottom.png",
    bottom: 0,
    left: 0,
    height: 7,
    width: 262
  });

  this.whoIsBreakingSelectorTable = Ti.UI.createView({
    backgroundColor: "transparent",
    height: 78,
    width: 260,
    top: 157
  });

  this.whoIsBreakingSelectorTable.add(this.whoIsBreakingSelectorTableBGTop);

  this.whoIsBreakingSelectorTable.add(this.whoIsBreakingSelectorTableBGBottom);

  this.whoIsBreakingSelectorTable.add(this.whoIsBreakingSelectorTableBG);

  this.whoIsBreakingPlayerOneButton = Ti.UI.createView({
    backgroundImage: "images/match/buttons/btn-menus-topbutton-wgradient.png",
    height: 36,
    width: 254,
    left: 3,
    top: 3
  });

  this.whoIsBreakingPlayerOneButtonActive = Ti.UI.createView({
    backgroundImage: "images/match/buttons/btn-menus-topbutton-wgradient-active.png",
    height: 36,
    width: 254,
    left: 3,
    top: 3,
    visible: false
  });

  this.whoIsBreakingPlayerOneButtonLabel = Ti.UI.createLabel({
    text: "",
    color: "#ffffff",
    top: 11,
    left: 13,
    height: 20,
    width: 240,
    textAlign: "left",
    font: {
      fontSize: 12,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    },
    touchEnabled: false
  });

  this.whoIsBreakingPlayerTwoButton = Ti.UI.createView({
    backgroundImage: "images/match/buttons/btn-menus-bottombutton-wgradient.png",
    height: 36,
    width: 254,
    left: 3,
    bottom: 3
  });

  this.whoIsBreakingPlayerTwoButtonActive = Ti.UI.createView({
    backgroundImage: "images/match/buttons/btn-menus-bottombutton-wgradient-active.png",
    height: 36,
    width: 254,
    left: 3,
    bottom: 3,
    visible: false
  });

  this.whoIsBreakingPlayerTwoButtonLabel = Ti.UI.createLabel({
    text: "",
    color: "#ffffff",
    bottom: 11,
    left: 13,
    height: 20,
    width: 240,
    textAlign: "left",
    font: {
      fontSize: 12,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    },
    touchEnabled: false
  });

  this.whoIsBreakingStartMatchButton = Ti.UI.createView({
    backgroundImage: "images/match/buttons/btn-startmatch.png",
    height: 39,
    width: 166,
    top: 250
  });

  this.whoIsBreakingStartMatchButtonLabel = Ti.UI.createLabel({
    text: "Start the Match",
    color: "#ffffff",
    top: 8,
    left: 0,
    height: 20,
    width: 166,
    textAlign: "center",
    font: {
      fontSize: 14,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.whoIsBreakingStartMatchButton.add(this.whoIsBreakingStartMatchButtonLabel);

  this.whoIsBreakingForfeitMatchButton = Ti.UI.createView({
    backgroundColor: "transparent",
    backgroundImage: "images/match/buttons/btn-edit-match.png",
    top: 294,
    width: 104,
    height: 27,
    isNinePatch: false
  });

  this.whoIsBreakingForfeitMatchButtonLabel = Ti.UI.createLabel({
    text: "Forfeit",
    color: "#ffffff",
    left: 30,
    shadowColor: "#000000",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.whoIsBreakingForfeitMatchButton.add(this.whoIsBreakingForfeitMatchButtonLabel);

  this.whoIsBreakingSuddenDeathMatchButton = Ti.UI.createView({
    backgroundColor: "transparent",
    backgroundImage: "images/match/buttons/btn-edit-match.png",
    top: 326,
    width: 104,
    height: 27,
    isNinePatch: false
  });

  this.whoIsBreakingSuddenDeathMatchButtonLabel = Ti.UI.createLabel({
    text: "Sudden Death",
    color: "#ffffff",
    left: 7,
    shadowColor: "#000000",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.whoIsBreakingSuddenDeathMatchButton.add(this.whoIsBreakingSuddenDeathMatchButtonLabel);

  this.whoIsBreakingForfeitMatchButton.addEventListener("click", function() {
    me.currentMatch.PlayerTwo.CurrentlyUp = true;
    me.currentMatch.Ended = true;
    me.currentMatch.Forfeit = true;
    me.atMatchResults[me.currentMatchNumber] = true;
    return me.updateUI();
  });

  this.whoIsBreakingSuddenDeathMatchButton.addEventListener("click", function() {
    me.currentMatch.setSuddenDeathMode();
    return me.updateUI();
  });

  this.whoIsBreakingStartMatchButton.addEventListener("click", function() {
    var holdPlayer;
    if (me.currentMatch.PlayerOne.CurrentlyUp === false && me.currentMatch.PlayerTwo.CurrentlyUp === false) {
      me.showOverlay("Must pick who breaks first!", 300);
      return;
    }
    if (me.currentMatch.PlayerTwo.CurrentlyUp === true) {
      holdPlayer = me.currentMatch.PlayerOne;
      me.currentMatch.PlayerOne = me.currentMatch.PlayerTwo;
      me.currentMatch.PlayerTwo = holdPlayer;
      me.save();
    }
    me.startCurrentMatch();
    me.updateUI();
    return me.startMatchOverlayContainer.visible = false;
  });

  whoIsBreakingPlayerOneButtonClick = function() {
    if (me.currentMatch.PlayerOne.CurrentlyUp === false) {
      me.currentMatch.PlayerOne.CurrentlyUp = true;
      me.currentMatch.PlayerTwo.CurrentlyUp = false;
      return me.updateStartMatchOverlay();
    }
  };

  whoIsBreakingPlayerTwoButtonClick = function() {
    if (me.currentMatch.PlayerTwo.CurrentlyUp === false) {
      me.currentMatch.PlayerOne.CurrentlyUp = false;
      me.currentMatch.PlayerTwo.CurrentlyUp = true;
      return me.updateStartMatchOverlay();
    }
  };

  this.whoIsBreakingPlayerOneButton.addEventListener("click", whoIsBreakingPlayerOneButtonClick);

  this.whoIsBreakingPlayerTwoButton.addEventListener("click", whoIsBreakingPlayerTwoButtonClick);

  this.whoIsBreakingPlayerOneButtonLabel.addEventListener("click", whoIsBreakingPlayerOneButtonClick);

  this.whoIsBreakingPlayerTwoButtonLabel.addEventListener("click", whoIsBreakingPlayerTwoButtonClick);

  this.whoIsBreakingSelectorTable.add(this.whoIsBreakingPlayerOneButtonActive);

  this.whoIsBreakingSelectorTable.add(this.whoIsBreakingPlayerTwoButtonActive);

  this.whoIsBreakingSelectorTable.add(this.whoIsBreakingPlayerOneButton);

  this.whoIsBreakingSelectorTable.add(this.whoIsBreakingPlayerTwoButton);

  this.whoIsBreakingSelectorTable.add(this.whoIsBreakingPlayerOneButtonLabel);

  this.whoIsBreakingSelectorTable.add(this.whoIsBreakingPlayerTwoButtonLabel);

  this.startMatchTable.add(this.playerOneStartNameLabel);

  this.startMatchTable.add(this.playerTwoStartNameLabel);

  this.startMatchTable.add(this.playerVsLabel);

  this.startMatchTable.add(this.matchPointsNeededToWinView);

  this.startMatchTable.add(this.startMatchPlayerOnePoints);

  this.startMatchTable.add(this.startMatchPlayerTwoPoints);

  this.startMatchOverlayContainer.add(this.whoIsBreakingStartMatchButton);

  this.startMatchOverlayContainer.add(this.whoIsBreakingForfeitMatchButton);

  this.startMatchOverlayContainer.add(this.whoIsBreakingSuddenDeathMatchButton);

  this.startMatchOverlayContainer.add(this.whoIsBreakingSelectorTable);

  this.startMatchOverlayContainer.add(this.whoIsBreakingLabel);

  this.startMatchOverlayContainer.add(this.startMatchTable);

  this.view.add(this.startMatchOverlayContainer);

  this.showStartMatchOverlay = function() {
    this.playerOneStartNameLabel.text = this.currentMatch.PlayerOne.getFirstNameWithInitials();
    this.playerTwoStartNameLabel.text = this.currentMatch.PlayerTwo.getFirstNameWithInitials();
    this.whoIsBreakingPlayerOneButtonLabel.text = this.currentMatch.PlayerOne.Name;
    this.whoIsBreakingPlayerTwoButtonLabel.text = this.currentMatch.PlayerTwo.Name;
    this.startMatchPlayerOnePoints.text = (this.leagueMatch.GameType === "NineBall" ? this.currentMatch.PlayerOne.BallCount : this.currentMatch.PlayerOne.getGamesNeededToWin());
    this.startMatchPlayerTwoPoints.text = (this.leagueMatch.GameType === "NineBall" ? this.currentMatch.PlayerTwo.BallCount : this.currentMatch.PlayerTwo.getGamesNeededToWin());
    this.updateStartMatchOverlay();
    return this.startMatchOverlayContainer.visible = true;
  };

  this.updateStartMatchOverlay = function() {
    this.whoIsBreakingPlayerOneButton.visible = !this.currentMatch.PlayerOne.CurrentlyUp;
    this.whoIsBreakingPlayerOneButtonActive.visible = this.currentMatch.PlayerOne.CurrentlyUp;
    this.whoIsBreakingPlayerTwoButton.visible = !this.currentMatch.PlayerTwo.CurrentlyUp;
    return this.whoIsBreakingPlayerTwoButtonActive.visible = this.currentMatch.PlayerTwo.CurrentlyUp;
  };

  this.hideStartMatchOverlay = function() {
    return this.startMatchOverlayContainer.visible = false;
  };

  me = this;

  this.statusOverlayContainer = Ti.UI.createImageView({
    backgroundImage: "/images/match/layout/bg-endgame.png",
    backgroundColor: "transparent",
    top: 44,
    left: 0,
    height: getPlatformHeight() - 44,
    width: getPlatformWidth(),
    visible: false
  });

  this.statusOverlay = Ti.UI.createView({
    backgroundColor: "transparent",
    width: 215,
    height: 120,
    isNinePatch: false,
    visible: false
  });

  this.statusOverlayMessage = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-statusmessages.png",
    backgroundColor: "transparent",
    width: 226,
    height: 30,
    isNinePatch: false
  });

  this.statusMessage = Ti.UI.createLabel({
    text: "",
    color: "#ffffff",
    width: 215,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.statusOverlayButton = Ti.UI.createButton({
    backgroundImage: "images/match/buttons/btn-continue-match.png",
    top: 80,
    width: 166,
    height: 39,
    color: "#ffffff",
    shadowColor: "#000000",
    shadowOffset: {
      x: 1,
      y: 1
    },
    title: "",
    font: {
      fontSize: 15,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    },
    isNinePatch: false,
    visible: false
  });

  this.statusOverlayButton.addEventListener("click", function() {
    me.startCurrentMatch();
    return me.fadeOutOverlayFast();
  });

  this.statusOverlayMessage.add(this.statusMessage);

  this.statusOverlay.add(this.statusOverlayMessage);

  this.statusOverlay.add(this.statusOverlayButton);

  this.view.add(this.statusOverlayContainer);

  this.view.add(this.statusOverlay);

  this.fadeOutOverlayFast = function(showOverlayCallback) {
    if (this.statusOverlay.visible === true) {
      return this.statusOverlay.animate({
        opacity: 0,
        duration: 75
      }, function() {
        me.statusOverlay.visible = false;
        me.statusOverlayContainer.visible = false;
        me.statusOverlayButton.visible = false;
        me.statusOverlay.opacity = 0;
        if (showOverlayCallback != null) {
          return showOverlayCallback();
        }
      });
    } else {
      if (showOverlayCallback != null) {
        return showOverlayCallback();
      }
    }
  };

  this.showOverlay = function(message, durationSpeed, actionToDoCallback) {
    return this.fadeOutOverlayFast(function() {
      me.statusMessage.text = message;
      me.statusOverlay.visible = true;
      return me.statusOverlay.animate({
        opacity: 1,
        duration: durationSpeed
      }, function() {
        if (actionToDoCallback != null ? actionToDoCallback() === false : void 0) {
          return;
        }
        return setTimeout((function() {
          return me.statusOverlay.animate({
            opacity: 0,
            duration: durationSpeed
          }, function() {
            statusOverlay.visible = false;
            return statusOverlay.opacity = 0;
          });
        }), 1000);
      });
    });
  };

  this.showOverlayUntilTap = function(message, buttonMessage, durationSpeed) {
    return this.fadeOutOverlayFast(function() {
      me.statusMessage.text = message;
      me.statusOverlayButton.title = buttonMessage;
      me.statusOverlayContainer.visible = true;
      me.statusOverlayButton.visible = true;
      me.statusOverlay.visible = true;
      return me.statusOverlay.animate({
        opacity: 1,
        duration: 400
      }, function() {
        return me.statusOverlay.opacity = 1;
      });
    });
  };

  this.leagueMatchResultsOverlayContainer = Ti.UI.createView({
    backgroundImage: (Ti.Platform.name !== "android" ? "images/match/layout/bg-menus-iphone.png" : "images/match/layout/bg-menus-android.png"),
    backgroundColor: "transparent",
    top: 44,
    left: 0,
    height: getPlatformHeight() - 44,
    width: getPlatformWidth(),
    visible: false
  });

  this.leagueMatchResultsLabel = Ti.UI.createLabel({
    text: "Final Match Results",
    color: "#ffffff",
    height: 40,
    width: 300,
    top: 18,
    textAlign: "center",
    font: {
      fontSize: 25,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsTable = Ti.UI.createView({
    backgroundColor: "transparent",
    height: 279,
    width: 266,
    top: 65
  });

  this.leagueMatchResultsTeamOneTable = Ti.UI.createImageView({
    backgroundImage: "images/match/layout/bg-leaguematchresults-table-teamone.png",
    height: 279,
    width: 266,
    visible: false
  });

  this.leagueMatchResultsTeamTwoTable = Ti.UI.createImageView({
    backgroundImage: "images/match/layout/bg-leaguematchresults-table-teamtwo.png",
    height: 279,
    width: 266,
    visible: false
  });

  this.leagueMatchResultsTeamOneWinnerNameLabel = Ti.UI.createLabel({
    text: "",
    color: "#ffffff",
    top: 6,
    left: 10,
    height: 20,
    width: 100,
    textAlign: "left",
    font: {
      fontSize: 15,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsTeamTwoWinnerNameLabel = Ti.UI.createLabel({
    text: "",
    color: "#ffffff",
    top: 6,
    right: 10,
    height: 20,
    width: 100,
    textAlign: "right",
    font: {
      fontSize: 15,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsWinnerBall = Ti.UI.createImageView({
    backgroundImage: "images/match/icons/icon-endmatch-9ball-small.png",
    backgroundColor: "transparent",
    top: 0,
    left: 117,
    height: 31,
    width: 31
  });

  this.leagueMatchResultsMatchOneScoreView = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-matchresults-smalltitles.png",
    height: 30,
    width: 110,
    top: 43
  });

  this.leagueMatchResultsMatchOneScoreLabel = Ti.UI.createLabel({
    text: "Match One",
    color: "#ffffff",
    top: 5,
    left: 0,
    height: 20,
    width: 110,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsMatchOneScoreView.add(this.leagueMatchResultsMatchOneScoreLabel);

  this.leagueMatchResultsMatchOneTeamOneScore = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 35,
    left: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsMatchOneTeamTwoScore = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 35,
    right: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsMatchTwoScoreView = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-matchresults-smalltitles.png",
    height: 30,
    width: 110,
    top: 82
  });

  this.leagueMatchResultsMatchTwoScoreLabel = Ti.UI.createLabel({
    text: "Match Two",
    color: "#ffffff",
    top: 5,
    left: 0,
    height: 20,
    width: 110,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsMatchTwoScoreView.add(this.leagueMatchResultsMatchTwoScoreLabel);

  this.leagueMatchResultsMatchTwoTeamOneScore = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 74,
    left: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsMatchTwoTeamTwoScore = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 74,
    right: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsMatchThreeScoreView = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-matchresults-smalltitles.png",
    height: 30,
    width: 110,
    top: 121
  });

  this.leagueMatchResultsMatchThreeScoreLabel = Ti.UI.createLabel({
    text: "Match Three",
    color: "#ffffff",
    top: 5,
    left: 0,
    height: 20,
    width: 110,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsMatchThreeScoreView.add(this.leagueMatchResultsMatchThreeScoreLabel);

  this.leagueMatchResultsMatchThreeTeamOneScore = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 113,
    left: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsMatchThreeTeamTwoScore = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 113,
    right: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsMatchFourScoreView = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-matchresults-smalltitles.png",
    height: 30,
    width: 110,
    top: 160
  });

  this.leagueMatchResultsMatchFourScoreLabel = Ti.UI.createLabel({
    text: "Match Four",
    color: "#ffffff",
    top: 5,
    left: 0,
    height: 20,
    width: 110,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsMatchFourScoreView.add(this.leagueMatchResultsMatchFourScoreLabel);

  this.leagueMatchResultsMatchFourTeamOneScore = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 152,
    left: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsMatchFourTeamTwoScore = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 152,
    right: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsMatchFiveScoreView = Ti.UI.createView({
    backgroundImage: "images/match/layout/bg-matchresults-smalltitles.png",
    height: 30,
    width: 110,
    top: 199
  });

  this.leagueMatchResultsMatchFiveScoreLabel = Ti.UI.createLabel({
    text: "Match Five",
    color: "#ffffff",
    top: 5,
    left: 0,
    height: 20,
    width: 110,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsMatchFiveScoreView.add(this.leagueMatchResultsMatchFiveScoreLabel);

  this.leagueMatchResultsMatchFiveTeamOneScore = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 191,
    left: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsMatchFiveTeamTwoScore = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 191,
    right: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsTeamOneTotalScore = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 238,
    left: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsTotalScoresLabel = Ti.UI.createLabel({
    text: "Total Scores",
    color: "#ffffff",
    top: 248,
    left: 0,
    height: 20,
    width: 266,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsTeamTwoTotalScore = Ti.UI.createLabel({
    text: "",
    color: "#f8d317",
    top: 238,
    right: 0,
    height: 35,
    width: 77,
    textAlign: "center",
    font: {
      fontSize: 30,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsEditButton = Ti.UI.createView({
    backgroundColor: "transparent",
    backgroundImage: "images/match/buttons/btn-edit-match.png",
    top: 354,
    left: 39,
    width: 104,
    height: 27,
    isNinePatch: false
  });

  this.leagueMatchResultsEditButtonLabel = Ti.UI.createLabel({
    text: "Edit Match",
    color: "#ffffff",
    left: 18,
    shadowColor: "#000000",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsEditButton.add(this.leagueMatchResultsEditButtonLabel);

  this.leagueMatchResultsEditButton.addEventListener("click", function() {
    return me.matchWindow.visible = false;
  });

  this.leagueMatchResultsSignScoresheetsButton = Ti.UI.createView({
    backgroundImage: "images/match/buttons/btn-sign-scoresheets.png",
    top: 354,
    right: 39,
    width: 131,
    height: 27,
    isNinePatch: false
  });

  this.leagueMatchResultsSignScoresheetsButtonLabel = Ti.UI.createLabel({
    text: "Sign Scoresheets",
    color: "#ffffff",
    left: 12,
    shadowColor: "#000000",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.leagueMatchResultsSignScoresheetsButton.add(this.leagueMatchResultsSignScoresheetsButtonLabel);

  this.leagueMatchResultsSignScoresheetsButtonClick = function() {
    return me.openSignatureView();
  };

  this.leagueMatchResultsSignScoresheetsButtonLabel.addEventListener("click", this.leagueMatchResultsSignScoresheetsButtonClick);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsTeamOneTable);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsTeamTwoTable);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsTeamOneWinnerNameLabel);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsTeamTwoWinnerNameLabel);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsWinnerBall);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchOneScoreView);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchOneTeamOneScore);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchOneTeamTwoScore);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchTwoScoreView);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchTwoTeamOneScore);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchTwoTeamTwoScore);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchThreeScoreView);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchThreeTeamOneScore);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchThreeTeamTwoScore);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchFourScoreView);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchFourTeamOneScore);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchFourTeamTwoScore);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchFiveScoreView);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchFiveTeamOneScore);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsMatchFiveTeamTwoScore);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsTotalScoresLabel);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsTeamOneTotalScore);

  this.leagueMatchResultsTable.add(this.leagueMatchResultsTeamTwoTotalScore);

  this.leagueMatchResultsOverlayContainer.add(this.leagueMatchResultsLabel);

  this.leagueMatchResultsOverlayContainer.add(this.leagueMatchResultsTable);

  this.leagueMatchResultsOverlayContainer.add(this.leagueMatchResultsEditButton);

  this.leagueMatchResultsOverlayContainer.add(this.leagueMatchResultsSignScoresheetsButton);

  this.view.add(this.leagueMatchResultsOverlayContainer);

  this.showLeagueMatchResultsOverlay = function() {
    this.leagueMatchResultsTeamOneTable.visible = this.leagueMatch.isHomeTeamWinning();
    this.leagueMatchResultsTeamTwoTable.visible = this.leagueMatch.isAwayTeamWinning();
    this.matchNumberLabel.text = "Team " + this.leagueMatch.getWinningTeamNumber() + " Wins!";
    this.previousMatchButton.visible = false;
    this.nextMatchButton.visible = false;
    this.leagueMatchResultsTeamOneWinnerNameLabel.text = "Team " + this.leagueMatch.HomeTeamNumber;
    this.leagueMatchResultsTeamTwoWinnerNameLabel.text = "Team " + this.leagueMatch.AwayTeamNumber;
    this.leagueMatchResultsMatchOneTeamOneScore.text = this.leagueMatch.MatchOne.getMatchPointsByTeamNumber(this.leagueMatch.HomeTeamNumber).toString();
    this.leagueMatchResultsMatchOneTeamTwoScore.text = this.leagueMatch.MatchOne.getMatchPointsByTeamNumber(this.leagueMatch.AwayTeamNumber).toString();
    this.leagueMatchResultsMatchTwoTeamOneScore.text = this.leagueMatch.MatchTwo.getMatchPointsByTeamNumber(this.leagueMatch.HomeTeamNumber).toString();
    this.leagueMatchResultsMatchTwoTeamTwoScore.text = this.leagueMatch.MatchTwo.getMatchPointsByTeamNumber(this.leagueMatch.AwayTeamNumber).toString();
    this.leagueMatchResultsMatchThreeTeamOneScore.text = this.leagueMatch.MatchThree.getMatchPointsByTeamNumber(this.leagueMatch.HomeTeamNumber).toString();
    this.leagueMatchResultsMatchThreeTeamTwoScore.text = this.leagueMatch.MatchThree.getMatchPointsByTeamNumber(this.leagueMatch.AwayTeamNumber).toString();
    this.leagueMatchResultsMatchFourTeamOneScore.text = this.leagueMatch.MatchFour.getMatchPointsByTeamNumber(this.leagueMatch.HomeTeamNumber).toString();
    this.leagueMatchResultsMatchFourTeamTwoScore.text = this.leagueMatch.MatchFour.getMatchPointsByTeamNumber(this.leagueMatch.AwayTeamNumber).toString();
    this.leagueMatchResultsMatchFiveTeamOneScore.text = this.leagueMatch.MatchFive.getMatchPointsByTeamNumber(this.leagueMatch.HomeTeamNumber).toString();
    this.leagueMatchResultsMatchFiveTeamTwoScore.text = this.leagueMatch.MatchFive.getMatchPointsByTeamNumber(this.leagueMatch.AwayTeamNumber).toString();
    this.leagueMatchResultsTeamOneTotalScore.text = this.leagueMatch.getHomeTeamMatchPoints().toString();
    this.leagueMatchResultsTeamTwoTotalScore.text = this.leagueMatch.getAwayTeamMatchPoints().toString();
    return this.leagueMatchResultsOverlayContainer.visible = true;
  };

  this.hideLeagueMatchOverlay = function() {
    return this.leagueMatchResultsOverlayContainer.visible = false;
  };

  this.leagueMatchResultsShowSignatureButton = function() {
    return me.leagueMatchResultsMainMenuButtonLabel.text = "Sign Match";
  };

  this.leagueMatchResultsShowMainMenuButton = function() {
    return me.leagueMatchResultsMainMenuButtonLabel.text = "Main Menu";
  };

}).call(this);
