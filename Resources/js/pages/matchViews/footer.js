// Generated by CoffeeScript 1.3.1
(function() {
  var me;

  me = this;

  this.buttonShelfBar = Ti.UI.createView({
    backgroundColor: "transparent",
    bottom: 72,
    left: 0,
    width: getPlatformWidth(),
    height: 37
  });

  this.buttonShelfContainer = Ti.UI.createView({
    backgroundColor: "transparent",
    bottom: 0,
    width: 260,
    height: 37
  });

  this.buttonShelf = Ti.UI.createView({
    backgroundColor: "transparent",
    backgroundImage: "images/match/layout/shelf-for-buttons.png",
    bottom: 0,
    top: 20,
    width: 260,
    height: 29,
    isNinePatch: false
  });

  this.buttonContainer = Ti.UI.createView({
    backgroundColor: "transparent",
    top: 0,
    width: 235,
    height: 28
  });

  this.safetyButtonContainer = Ti.UI.createView({
    backgroundColor: "transparent",
    top: 0,
    left: 0,
    width: 132,
    height: 28
  });

  this.safetyButton = Ti.UI.createView({
    backgroundColor: "transparent",
    backgroundImage: "images/match/buttons/btn-safety.png",
    top: 0,
    left: 0,
    width: 132,
    height: 28,
    isNinePatch: false
  });

  this.safetySelectedButton = Ti.UI.createView({
    backgroundColor: "transparent",
    backgroundImage: "images/match/buttons/btn-safety-selected.png",
    top: 0,
    left: 0,
    width: 132,
    height: 28,
    visible: false,
    isNinePatch: false
  });

  this.safetyButtonNameLabel = Ti.UI.createLabel({
    text: "Safety",
    color: "#ffffff",
    shadowColor: "#000000",
    shadowOffset: {
      x: 1,
      y: 1
    },
    left: 30,
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    },
    touchEnabled: false
  });

  this.safetyButtonNumberLabel = Ti.UI.createLabel({
    text: this.currentMatch.getTotalSafeties(),
    color: "#afd5f1",
    shadowColor: "#000000",
    shadowOffset: {
      x: 1,
      y: 1
    },
    left: 74,
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    },
    touchEnabled: false
  });

  this.timeoutButtonContainer = Ti.UI.createView({
    backgroundColor: "transparent",
    top: 0,
    right: 0,
    width: 100,
    height: 28
  });

  this.timeoutButton = Ti.UI.createView({
    color: "#fff",
    backgroundImage: "images/match/buttons/btn-timeout.png",
    top: 0,
    left: 0,
    width: 100,
    height: 28,
    isNinePatch: false
  });

  this.timeoutSelectedButton = Ti.UI.createView({
    color: "#fff",
    backgroundImage: "images/match/buttons/btn-timeout-selected.png",
    top: 0,
    right: 0,
    width: 100,
    height: 28,
    visible: false,
    isNinePatch: false
  });

  this.timeoutButtonNameLabel = Ti.UI.createLabel({
    text: "Timeout",
    color: "#ffffff",
    shadowColor: "#000000",
    shadowOffset: {
      x: 1,
      y: 1
    },
    left: 28,
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.timeoutButtonNumberLabel = Ti.UI.createLabel({
    text: this.currentMatch.CurrentGame.getCurrentPlayerRemainingTimeouts(),
    color: "#afd5f1",
    shadowColor: "#000000",
    shadowOffset: {
      x: 1,
      y: 1
    },
    left: 83,
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.setSafteyBackground = function() {
    me.safetyButton.backgroundImage = "images/match/buttons/btn-safety.png";
    me.safetyButton.hide();
    return me.safetyButton.show();
  };

  this.showSelectedSafety = function(turnOn) {
    me.safetyButton.visible = !turnOn;
    return me.safetySelectedButton.visible = turnOn;
  };

  this.showSelectedTimeout = function(turnOn) {
    me.timeoutButton.visible = !turnOn;
    return me.timeoutSelectedButton.visible = turnOn;
  };

  this.safetyButtonClick = function() {
    if (me.currentMatch.CurrentGame.OnBreak === true) {
      showOverlay("Must end break first!", 300);
      return;
    }
    me.showSelectedSafety(true);
    me.currentMatch.hitSafety();
    me.saveAndUpdateUI();
    return me.showSelectedSafety(false);
  };

  this.timeoutButtonClick = function() {
    me.showSelectedTimeout(true);
    me.currentMatch.CurrentGame.takeTimeout();
    me.saveAndUpdateUI();
    return me.showSelectedTimeout(false);
  };

  this.safetyButton.addEventListener("click", this.safetyButtonClick);

  this.safetyButtonNumberLabel.addEventListener("click", this.safetyButtonClick);

  this.safetyButtonNameLabel.addEventListener("click", this.safetyButtonClick);

  this.timeoutButton.addEventListener("click", this.timeoutButtonClick);

  this.timeoutButtonNumberLabel.addEventListener("click", this.timeoutButtonClick);

  this.timeoutButtonNameLabel.addEventListener("click", this.timeoutButtonClick);

  this.buttonShelfContainer.add(this.buttonShelf);

  this.safetyButtonContainer.add(this.safetyButton);

  this.safetyButtonContainer.add(this.safetySelectedButton);

  this.safetyButtonContainer.add(this.safetyButtonNameLabel);

  this.safetyButtonContainer.add(this.safetyButtonNumberLabel);

  this.buttonContainer.add(this.safetyButtonContainer);

  this.timeoutButtonContainer.add(this.timeoutButton);

  this.timeoutButtonContainer.add(this.timeoutSelectedButton);

  this.timeoutButtonContainer.add(this.timeoutButtonNameLabel);

  this.timeoutButtonContainer.add(this.timeoutButtonNumberLabel);

  this.buttonContainer.add(this.timeoutButtonContainer);

  this.buttonShelfContainer.add(this.buttonContainer);

  this.buttonShelfBar.add(this.buttonShelfContainer);

  this.view.add(this.buttonShelfBar);

  this.getInningText = function() {
    if (this.currentMatch.getTotalInnings() === 1) {
      return "Inning";
    } else {
      return "Innings";
    }
  };

  this.getDeadBallText = function() {
    if (this.leagueMatch.GameType === "NineBall") {
      if (this.currentMatch.getTotalDeadBalls() === 1) {
        return "Dead Ball";
      } else {
        return "Dead Balls";
      }
    }
  };

  this.statusBarInformation = Ti.UI.createView({
    backgroundImage: "images/match/layout/statusbar-messages.png",
    bottom: 44,
    left: 0,
    width: getPlatformWidth(),
    height: 28,
    isNinePatch: false
  });

  this.statusBarInformationGreen = Ti.UI.createView({
    backgroundImage: "images/match/layout/statusbar-messages-green.png",
    bottom: 44,
    left: 0,
    width: getPlatformWidth(),
    height: 28,
    isNinePatch: false
  });

  this.statusBarInformationGreen.visible = false;

  this.statusBarInformationLabel = Ti.UI.createLabel({
    text: this.currentMatch.CurrentGame.getCurrentlyUpPlayer().getFirstNameWithInitials() + " is currently breaking in game " + this.currentMatch.getCurrentGameNumber(),
    color: "#ffffff",
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.statusBar = Ti.UI.createView({
    backgroundColor: "transparent",
    backgroundImage: "images/match/layout/statusbar.png",
    bottom: 44,
    left: 0,
    width: getPlatformWidth(),
    height: 28,
    isNinePatch: false,
    visible: false
  });

  this.gameScoreView = Ti.UI.createView({
    backgroundColor: "transparent",
    left: 0,
    width: 125,
    height: 28
  });

  this.gameScoreNameLabel = Ti.UI.createLabel({
    text: "Game Score",
    color: "#ffffff",
    left: 8,
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.gameScoreLabel = Ti.UI.createLabel({
    text: this.currentMatch.CurrentGame.getGameScore(),
    color: "#afd5f1",
    left: 90,
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.gameScoreView.add(this.gameScoreNameLabel);

  this.gameScoreView.add(this.gameScoreLabel);

  this.inningsView = Ti.UI.createView({
    backgroundColor: "transparent",
    left: 121,
    width: 93,
    height: 28
  });

  this.inningsPencilImage = Ti.UI.createImageView({
    backgroundImage: "images/match/icons/icon-edit.png",
    left: 6,
    width: 12,
    height: 13,
    isNinePatch: false
  });

  this.inningsNumberLabel = Ti.UI.createLabel({
    text: this.currentMatch.getTotalInnings(),
    color: "#afd5f1",
    left: 19,
    width: 18,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.inningsNameLabel = Ti.UI.createLabel({
    text: getInningText(),
    color: "#ffffff",
    left: 37,
    width: 56,
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.inningsView.add(this.inningsPencilImage);

  this.inningsView.add(this.inningsNumberLabel);

  this.inningsView.add(this.inningsNameLabel);

  this.deadBallView = Ti.UI.createView({
    backgroundColor: "transparent",
    left: 215,
    width: 105,
    height: 28
  });

  this.deadBallPencilImage = Ti.UI.createImageView({
    backgroundImage: "images/match/icons/icon-edit.png",
    left: 2,
    width: 12,
    height: 13,
    isNinePatch: false
  });

  this.deadBallNumberLabel = Ti.UI.createLabel({
    text: (this.leagueMatch.GameType === "NineBall" ? this.currentMatch.getTotalDeadBalls() : "0"),
    color: "#afd5f1",
    left: 16,
    width: 18,
    textAlign: "center",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.deadBallNameLabel = Ti.UI.createLabel({
    text: "Dead Balls",
    color: "#ffffff",
    left: 34,
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.deadBallView.add(this.deadBallPencilImage);

  this.deadBallView.add(this.deadBallNumberLabel);

  this.deadBallView.add(this.deadBallNameLabel);

  this.statusBarInformation.add(this.statusBarInformationLabel);

  this.statusBar.add(this.deadBallView);

  this.statusBar.add(this.gameScoreView);

  this.statusBar.add(this.inningsView);

  this.view.add(this.statusBarInformationGreen);

  this.view.add(this.statusBarInformation);

  this.view.add(this.statusBar);

  me = this;

  this.buttonFooterBar = Ti.UI.createView({
    backgroundColor: "transparent",
    backgroundImage: "images/match/layout/footerbar.png",
    bottom: 0,
    left: 0,
    width: getPlatformWidth(),
    height: 44,
    isNinePatch: false
  });

  this.mainButton = Ti.UI.createView({
    backgroundColor: "transparent",
    backgroundImage: "images/match/buttons/btn-main.png",
    top: 6,
    left: 6,
    width: 50,
    height: 31,
    isNinePatch: false
  });

  this.mainButtonLabel = Ti.UI.createLabel({
    text: "Main",
    color: "#ffffff",
    left: 12,
    shadowColor: "#000000",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.mainButton.add(mainButtonLabel);

  this.gameStatsButton = Ti.UI.createView({
    backgroundColor: "transparent",
    backgroundImage: "images/match/buttons/btn-gamestats.png",
    top: 6,
    left: 60,
    width: 86,
    height: 31,
    isNinePatch: false
  });

  this.gameStatsButtonLabel = Ti.UI.createLabel({
    text: "Game Stats",
    color: "#ffffff",
    width: 86,
    textAlign: "center",
    shadowColor: "#000000",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.gameStatsButton.add(gameStatsButtonLabel);

  this.shotMissedButton = Ti.UI.createButton({
    title: "End Break",
    backgroundColor: "transparent",
    backgroundImage: "images/match/buttons/btn-shotmissed.png",
    top: 6,
    left: 150,
    width: 89,
    height: 31,
    isNinePatch: false,
    color: "#ffffff",
    shadowColor: "#1e5523",
    font: {
      fontSize: 12.5,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.undoButton = Ti.UI.createView({
    backgroundColor: "transparent",
    backgroundImage: "images/match/buttons/btn-undo.png",
    top: 6,
    left: 244,
    width: 69,
    height: 31,
    isNinePatch: false
  });

  this.undoButtonLabel = Ti.UI.createLabel({
    text: "Undo",
    color: "#ffffff",
    left: 27,
    shadowColor: "#701613",
    font: {
      fontSize: 13,
      fontWeight: "bold",
      fontFamily: "HelveticaNeue-Bold"
    }
  });

  this.undoButton.add(undoButtonLabel);

  this.mainButton.addEventListener("click", function() {
    return me.matchWindow.close();
  });

  this.shotMissedButton.addEventListener("click", function() {
    me.currentMatch.shotMissed();
    return me.saveAndUpdateUI();
  });

  this.undoButton.addEventListener("click", function() {
    return me.showOverlay("Undoing Last Action!", 300, function() {
      var oldMatch, oldMatchJSON;
      oldMatchJSON = DataService.undoMatch(this.currentMatch.OriginalId);
      if (oldMatchJSON != null) {
        oldMatch = (this.leagueMatch.GameType === "NineBall" ? new NineBallMatch() : new EightBallMatch());
        oldMatch.fromJSON(oldMatchJSON);
        me.setCurrentMatch(oldMatch);
        return me.resetCurrentMatch();
      } else {
        me.showOverlay("End of History!", 400);
        return false;
      }
    });
  });

  this.buttonFooterBar.add(this.undoButton);

  this.buttonFooterBar.add(this.shotMissedButton);

  this.buttonFooterBar.add(this.gameStatsButton);

  this.buttonFooterBar.add(this.mainButton);

  this.view.add(this.buttonFooterBar);

}).call(this);
