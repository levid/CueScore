// Generated by CoffeeScript 1.3.3
(function() {
  var Match,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Match = (function(_super) {

    __extends(Match, _super);

    Match.prototype.defaults = {
      player: {
        one: {},
        two: {}
      },
      completedGames: [],
      ended: false,
      originalId: 0,
      leagueMatchId: 0,
      playerNumberWinning: 0,
      suddenDeath: false,
      forfeit: false,
      currentGame: null
    };

    function Match(options) {
      var playerOneName, playerOneNumber, playerOneRank, playerOneTeamNumber, playerTwoName, playerTwoNumber, playerTwoRank, playerTwoTeamNumber;
      _.extend(this, this.defaults);
      playerOneName = options.playerOneName;
      playerTwoName = options.playerTwoName;
      playerOneRank = options.playerOneRank;
      playerTwoRank = options.playerTwoRank;
      playerOneNumber = options.playerOneNumber;
      playerTwoNumber = options.playerTwoNumber;
      playerOneTeamNumber = options.playerOneTeamNumber;
      playerTwoTeamNumber = options.playerTwoTeamNumber;
      this.player.one = new $CS.Models.NineBall.Player(options = {
        name: playerOneName,
        rank: playerOneRank,
        number: playerOneNumber,
        teamNumber: playerOneTeamNumber
      });
      this.player.two = new $CS.Models.NineBall.Player(options = {
        name: playerTwoName,
        rank: playerTwoRank,
        number: playerTwoNumber,
        teamNumber: playerTwoTeamNumber
      });
      this.currentGame = this.getNewGame();
    }

    Match.prototype.getNewGame = function() {
      var newGame, options,
        _this = this;
      newGame = new $CS.Models.NineBall.Game(options = {
        addToPlayerOne: function() {
          return _this.player.one;
        },
        addToPlayerTwo: function() {
          return _this.player.two;
        },
        callback: function() {
          return _this.ended = true;
        }
      });
      return newGame;
    };

    Match.prototype.getPlayerScore = function(playerNum) {
      if (playerNum === 1) {
        return this.player.one.score;
      } else if (playerNum === 2) {
        return this.player.two.score;
      }
    };

    Match.prototype.getLosingPlayer = function() {
      if (this.isPlayerWinning(1) === true) {
        return this.player.two;
      } else {
        return this.player.one;
      }
    };

    Match.prototype.getWinningPlayer = function() {
      if (this.isPlayerWinning(1) === true) {
        return this.player.one;
      } else {
        return this.player.two;
      }
    };

    Match.prototype.getLosingPlayersMatchPoints = function() {
      var losingScore;
      losingScore = new $CS.Models.NineBall.Ranks().getLosingPlayersMatchPoints(this.getLosingPlayer().rank, this.getLosingPlayer().score);
      return losingScore;
    };

    Match.prototype.getWinningPlayersMatchPoints = function() {
      var winningScore;
      winningScore = new $CS.Models.NineBall.Ranks().getWinningPlayersMatchPoints(this.getLosingPlayer().rank, this.getLosingPlayer().score);
      return winningScore;
    };

    Match.prototype.getMatchPointsByPlayer = function(playerNum) {
      if (playerNum === 1) {
        if (this.isPlayerWinning(1) === true && this.isPlayerWinning(2) === false) {
          return new $CS.Models.NineBall.Ranks().getWinningPlayersMatchPoints(this.getLosingPlayer().rank, this.getLosingPlayer().score);
        } else {
          return new $CS.Models.NineBall.Ranks().getLosingPlayersMatchPoints(this.getLosingPlayer().rank, this.getLosingPlayer().score);
        }
      } else if (playerNum === 2) {
        if (this.isPlayerWinning(1) === false && this.isPlayerWinning(2) === true) {
          return new $CS.Models.NineBall.Ranks().getWinningPlayersMatchPoints(this.getLosingPlayer().rank, this.getLosingPlayer().score);
        } else {
          return new $CS.Models.NineBall.Ranks().getLosingPlayersMatchPoints(this.getLosingPlayer().rank, this.getLosingPlayer().score);
        }
      }
    };

    Match.prototype.getMatchPoints = function() {
      if (this.isPlayerWinning(1) === true) {
        return new $CS.Models.NineBall.Ranks().getWinningPlayersMatchPoints(this.player.two.rank, this.player.two.score) + "-" + new $CS.Models.NineBall.Ranks().getLosingPlayersMatchPoints(this.player.two.rank, this.player.two.score);
      } else if (this.isPlayerWinning(2) === true) {
        return new $CS.Models.NineBall.Ranks().getLosingPlayersMatchPoints(this.player.one.rank, this.player.one.score) + "-" + new $CS.Models.NineBall.Ranks().getWinningPlayersMatchPoints(this.player.one.rank, this.player.one.score);
      } else {
        return "Tied";
      }
    };

    Match.prototype.getMatchPointsByTeamNumber = function(teamNumber) {
      console.log(teamNumber);
      if (this.player.one.teamNumber === teamNumber) {
        return this.getMatchPointsByPlayer(1);
      } else if (this.player.two.teamNumber === teamNumber) {
        return this.getMatchPointsByPlayer(2);
      } else {
        return 0;
      }
    };

    Match.prototype.getTotalInnings = function() {
      var i, totalInnings;
      totalInnings = this.currentGame.numberOfInnings;
      if (this.completedGames.length > 0) {
        i = 0;
        while (i <= (this.completedGames.length - 1)) {
          totalInnings += this.completedGames[i].numberOfInnings;
          i++;
        }
      }
      return totalInnings.toString();
    };

    Match.prototype.getTotalDeadBalls = function() {
      var i, totalDeadBalls;
      totalDeadBalls = this.currentGame.getDeadBalls();
      if (this.completedGames.length > 0) {
        i = 0;
        while (i <= (this.completedGames.length - 1)) {
          totalDeadBalls += this.completedGames[i].getDeadBalls();
          i++;
        }
      }
      return totalDeadBalls.toString();
    };

    Match.prototype.getTotalSafeties = function() {
      return this.player.one.getSafeties() + " to " + this.player.two.getSafeties();
    };

    Match.prototype.getCurrentGameNumber = function() {
      return (this.completedGames.length + 1).toString();
    };

    Match.prototype.setSuddenDeathMode = function() {
      this.suddenDeath = true;
      this.player.one.gamesNeededToWin = 1;
      return this.player.two.gamesNeededToWin = 1;
    };

    Match.prototype.scoreNumberedBall = function(ballNumber) {
      this.currentGame.scoreBall(ballNumber);
      if (this.isPlayerWinning(1) === true) {
        this.playerNumberWinning = 1;
      } else {
        this.playerNumberWinning = 2;
      }
      return this.checkForWin();
    };

    Match.prototype.shotMissed = function() {
      return this.currentGame.nextPlayerIsUp();
    };

    Match.prototype.hitDeadBall = function(ballNumber) {
      this.currentGame.hitDeadBall(ballNumber);
      return this.checkForWin();
    };

    Match.prototype.hitSafety = function() {
      return this.currentGame.hitSafety();
    };

    Match.prototype.checkForWin = function() {};

    Match.prototype.startNewGame = function() {
      if (this.currentGame.ended === true) {
        this.completedGames.push(this.currentGame);
        return this.currentGame = this.getNewGame();
      }
    };

    Match.prototype.isPlayerWinning = function(playerNum) {
      if (playerNum === 1) {
        if ((this.player.one.getRatioScore() > this.player.two.getRatioScore()) || (this.player.one.getRatioScore() === this.player.two.getRatioScore() && this.playerNumberWinning === 1)) {
          return true;
        } else {
          return false;
        }
      } else if (playerNum === 2) {
        if ((this.player.one.getRatioScore() < this.player.two.getRatioScore()) || (this.player.one.getRatioScore() === this.player.two.getRatioScore() && this.playerNumberWinning === 2)) {
          return true;
        } else {
          return false;
        }
      }
    };

    Match.prototype.toJSON = function() {
      return {
        player: {
          one: this.player.one.toJSON(),
          two: this.player.two.toJSON()
        },
        playerOneMatchPointsEarned: this.getMatchPointsByPlayer(1),
        playerTwoMatchPointsEarned: this.getMatchPointsByPlayer(2),
        currentGame: this.currentGame.toJSON(),
        completedGames: this.completedGamesToJSON(),
        suddenDeath: this.suddenDeath,
        forfeit: this.forfeit,
        ended: this.ended,
        originalId: this.originalId,
        leagueMatchId: this.leagueMatchId
      };
    };

    Match.prototype.completedGamesToJSON = function() {
      var arrayToReturn, i;
      arrayToReturn = [];
      i = 0;
      while (i <= this.completedGames.length - 1) {
        arrayToReturn[i] = this.completedGames[i].toJSON();
        i++;
      }
      return arrayToReturn;
    };

    Match.prototype.fromJSON = function(json) {
      var currentGame;
      this.playerOneMatchPointsEarned = json.playerOneMatchPointsEarned;
      this.playerTwoMatchPointsEarned = json.playerTwoMatchPointsEarned;
      this.player.one = this.playerFromJSON(json.player.one);
      this.player.two = this.playerFromJSON(json.player.two);
      this.completedGames = this.completedGamesFromJSON(json.completedGames);
      this.suddenDeath = json.suddenDeath;
      this.forfeit = json.forfeit;
      this.ended = json.ended;
      this.originalId = json.originalId;
      this.leagueMatchId = json.leagueMatchId;
      currentGame = this.getNewGame();
      currentGame.fromJSON(new function() {
        return json.currentGame;
      });
      return this.currentGame = currentGame;
    };

    Match.prototype.playerFromJSON = function(json) {
      var player;
      player = new $CS.Models.NineBall.Player(json);
      player.fromJSON(new function() {
        return json;
      });
      return player;
    };

    Match.prototype.completedGamesFromJSON = function(json) {
      var arrayToReturn, completedGame, i;
      arrayToReturn = [];
      i = 0;
      while (i <= json.length - 1) {
        completedGame = this.getNewGame();
        completedGame.fromJSON(new function() {
          return json[i];
        });
        arrayToReturn.push(completedGame);
        i++;
      }
      return arrayToReturn;
    };

    return Match;

  })($CS.Models.NineBall);

  $CS.Models.NineBall.Match = Match;

}).call(this);
