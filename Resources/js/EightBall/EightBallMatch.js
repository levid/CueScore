// Generated by CoffeeScript 1.3.1
(function() {
  var EightBallMatch;

  EightBallMatch = function(player1, player2, player1Rank, player2Rank, player1Number, player2Number, player1TeamNumber, player2TeamNumber) {
    var me;
    this.PlayerOne = new EightBallPlayer(player1, player1Rank, player1Number, player1TeamNumber);
    this.PlayerTwo = new EightBallPlayer(player2, player2Rank, player2Number, player2TeamNumber);
    if ((this.PlayerOne.Rank != null) && (this.PlayerTwo.Rank != null)) {
      this.PlayerOne.GamesNeededToWin = new EightBallRanks().getGamesNeedToWin(player1Rank, player2Rank);
      this.PlayerTwo.GamesNeededToWin = new EightBallRanks().getGamesNeedToWin(player2Rank, player1Rank);
    }
    this.CompletedGames = [];
    this.Ended = false;
    this.OriginalId = 0;
    this.LeagueMatchId = 0;
    this.PlayerNumberWinning = 0;
    this.PlayerOneWon = false;
    this.PlayerTwoWon = false;
    this.ArePlayersSwitching = false;
    this.SuddenDeath = false;
    this.Forfeit = false;
    me = this;
    this.getNewGame = function() {
      return new EightBallGame(function() {
        return me.PlayerOne;
      }, function() {
        return me.PlayerTwo;
      }, function() {
        if (me.getPlayerOneRemainingGamesNeededToWin() === 0) {
          me.PlayerOneWon = true;
          return me.Ended = true;
        } else if (me.getPlayerTwoRemainingGamesNeededToWin() === 0) {
          me.PlayerTwoWon = true;
          return me.Ended = true;
        }
      });
    };
    this.CurrentGame = this.getNewGame();
    this.scoreNumberedBall = function(ballNumber) {
      this.ArePlayersSwitching = false;
      this.CurrentGame.scoreBall(ballNumber);
      if (this.isPlayerOneWinning() === true) {
        this.PlayerNumberWinning = 1;
      } else {
        this.PlayerNumberWinning = 2;
      }
      return this.checkForWin();
    };
    this.shotMissed = function() {
      this.CurrentGame.nextPlayerIsUp();
      if (this.CurrentGame.BreakingPlayerStillHitting === false) {
        return this.ArePlayersSwitching = true;
      }
    };
    this.hitSafety = function() {
      return this.CurrentGame.hitSafety();
    };
    this.checkForWin = function() {};
    this.startNewGame = function() {
      if (this.CurrentGame.Ended === true) {
        this.CompletedGames.push(this.CurrentGame);
        return this.CurrentGame = this.getNewGame();
      }
    };
    this.setSuddenDeathMode = function() {
      this.SuddenDeath = true;
      this.PlayerOne.GamesNeededToWin = 1;
      return this.PlayerTwo.GamesNeededToWin = 1;
    };
    this.resetPlayerRankStats = function() {
      this.PlayerOne.GamesNeededToWin = new EightBallRanks().getGamesNeedToWin(this.PlayerOne.Rank, this.PlayerTwo.Rank);
      this.PlayerTwo.GamesNeededToWin = new EightBallRanks().getGamesNeedToWin(this.PlayerTwo.Rank, this.PlayerOne.Rank);
      this.PlayerOne.resetPlayerRankStats();
      return this.PlayerTwo.resetPlayerRankStats();
    };
    this.getMatchPointsByTeamNumber = function(teamNumber) {
      if (this.PlayerOne.TeamNumber === teamNumber) {
        return this.getPlayerOneMatchPoints();
      } else {
        if (this.PlayerTwo.TeamNumber === teamNumber) {
          return this.getPlayerTwoMatchPoints();
        }
      }
      return 0;
    };
    this.getWinningPlayer = function() {
      if ((this.getPlayerOneGamesWon() / this.PlayerOne.GamesNeededToWin) > (this.getPlayerTwoGamesWon() / this.PlayerTwo.GamesNeededToWin)) {
        return this.PlayerOne;
      }
      return this.PlayerTwo;
    };
    this.getPlayerOneRemainingGamesNeededToWin = function() {
      return (this.PlayerOne.GamesNeededToWin - this.getPlayerOneGamesWon()).toString();
    };
    this.getPlayerOneGamesWon = function() {
      var gamesWon, i;
      gamesWon = (this.CurrentGame.PlayerOneWon === true ? 1 : 0);
      i = 0;
      while (i <= (this.CompletedGames.length - 1)) {
        if (this.CompletedGames[i].PlayerOneWon === true) {
          gamesWon = gamesWon + 1;
        }
        i++;
      }
      return gamesWon;
    };
    this.getPlayerTwoRemainingGamesNeededToWin = function() {
      return (this.PlayerTwo.GamesNeededToWin - this.getPlayerTwoGamesWon()).toString();
    };
    this.getPlayerTwoGamesWon = function() {
      var gamesWon, i;
      gamesWon = (this.CurrentGame.PlayerTwoWon === true ? 1 : 0);
      i = 0;
      while (i <= (this.CompletedGames.length - 1)) {
        if (this.CompletedGames[i].PlayerTwoWon === true) {
          gamesWon = gamesWon + 1;
        }
        i++;
      }
      return gamesWon;
    };
    this.getPlayerOneMatchPoints = function() {
      if ((this.getPlayerOneGamesWon() / this.PlayerOne.GamesNeededToWin) > (this.getPlayerTwoGamesWon() / this.PlayerTwo.GamesNeededToWin)) {
        return 1;
      }
      return 0;
    };
    this.getPlayerTwoMatchPoints = function() {
      if ((this.getPlayerOneGamesWon() / this.PlayerOne.GamesNeededToWin) < (this.getPlayerTwoGamesWon() / this.PlayerTwo.GamesNeededToWin)) {
        return 1;
      }
      return 0;
    };
    this.getMatchPoints = function() {
      if (this.getPlayerOneMatchPoints() === this.getPlayerTwoMatchPoints()) {
        return "TIE";
      }
      return this.getPlayerOneMatchPoints() + "-" + this.getPlayerTwoMatchPoints();
    };
    this.isPlayerOneWinning = function() {
      if ((this.getPlayerOneGamesWon() / this.PlayerOne.GamesNeededToWin) > (this.getPlayerTwoGamesWon() / this.PlayerTwo.GamesNeededToWin)) {
        return true;
      }
      return false;
    };
    this.isPlayerTwoWinning = function() {
      if ((this.getPlayerOneGamesWon() / this.PlayerOne.GamesNeededToWin) < (this.getPlayerTwoGamesWon() / this.PlayerTwo.GamesNeededToWin)) {
        return true;
      }
      return false;
    };
    this.getTotalInnings = function() {
      var i, totalInnings;
      totalInnings = this.CurrentGame.NumberOfInnings;
      if (this.CompletedGames.length > 0) {
        i = 0;
        while (i <= (this.CompletedGames.length - 1)) {
          totalInnings += this.CompletedGames[i].NumberOfInnings;
          i++;
        }
      }
      return totalInnings.toString();
    };
    this.getTotalSafeties = function() {
      return this.PlayerOne.getSafeties() + " to " + this.PlayerTwo.getSafeties();
    };
    this.getCurrentGameNumber = function() {
      return (this.CompletedGames.length + 1).toString();
    };
    this.toJSON = function() {
      return {
        PlayerOne: this.PlayerOne.toJSON(),
        PlayerTwo: this.PlayerTwo.toJSON(),
        PlayerOneGamesWon: this.getPlayerOneGamesWon(),
        PlayerTwoGamesWon: this.getPlayerTwoGamesWon(),
        CurrentGame: this.CurrentGame.toJSON(),
        CompletedGames: this.completedGamesToJSON(),
        SuddenDeath: this.SuddenDeath,
        Forfeit: this.Forfeit,
        Ended: this.Ended,
        OriginalId: this.OriginalId,
        LeagueMatchId: this.LeagueMatchId
      };
    };
    this.completedGamesToJSON = function() {
      var arrayToReturn, i;
      arrayToReturn = [];
      i = 0;
      while (i <= this.CompletedGames.length - 1) {
        arrayToReturn[i] = this.CompletedGames[i].toJSON();
        i++;
      }
      return arrayToReturn;
    };
    this.fromJSON = function(json) {
      var currentGame;
      this.PlayerOne = this.playerFromJSON(json.PlayerOne);
      this.PlayerTwo = this.playerFromJSON(json.PlayerTwo);
      this.resetPlayerRankStats();
      this.CompletedGames = this.completedGamesFromJSON(json.CompletedGames);
      this.SuddenDeath = json.SuddenDeath;
      this.Forfeit = json.Forfeit;
      this.Ended = json.Ended;
      this.OriginalId = json.OriginalId;
      this.LeagueMatchId = json.LeagueMatchId;
      currentGame = this.getNewGame();
      currentGame.fromJSON(new function() {
        return json.CurrentGame;
      });
      return this.CurrentGame = currentGame;
    };
    this.playerFromJSON = function(json) {
      var player;
      player = new EightBallPlayer();
      player.fromJSON(new function() {
        return json;
      });
      return player;
    };
    return this.completedGamesFromJSON = function(json) {
      var arrayToReturn, completedGame, i;
      arrayToReturn = [];
      i = 0;
      while (i <= json.length - 1) {
        completedGame = this.getNewGame();
        completedGame.fromJSON(new function() {
          return json[i];
        });
        arrayToReturn.push(completedGame);
        i++;
      }
      return arrayToReturn;
    };
  };

}).call(this);
