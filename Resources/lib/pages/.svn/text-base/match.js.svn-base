var play = function(match){
    var me = this;
	this.leagueMatch = match;
	this.currentMatchNumber = 1;
	this.matchStarted = [0, false, false, false, false, false];
	this.atMatchResults = [0, false, false, false, false, false];
	this.hasSentPDF = false;
/*
    Titanium.include('/lib/json2.js');
    Titanium.include('/lib/NineBall/NineBallGame.js');
    Titanium.include('/lib/NineBall/NineBallPlayer.js');
    Titanium.include('/lib/NineBall/NineBallLeagueMatch.js');
    Titanium.include('/lib/NineBall/NineBallMatch.js');
    Titanium.include('/lib/NineBall/NineBallRanks.js');
    Titanium.include('/lib/EightBall/EightBallGame.js');
    Titanium.include('/lib/EightBall/EightBallPlayer.js');
    Titanium.include('/lib/EightBall/EightBallLeagueMatch.js');
    Titanium.include('/lib/EightBall/EightBallMatch.js');
    Titanium.include('/lib/EightBall/EightBallRanks.js');
    Titanium.include('/lib/Services/DataService.js');

    DataService.setupLocalDatabase();
    
//  NineBall Objects
//	this.leagueMatch = new NineBallLeagueMatch("123", "456", "HomeTeam", "AwayTeam", "1:00 am", "Coin-Operated");
//	this.leagueMatch.setMatchOne(new NineBallMatch("Isaac Wooten", "James Armstead", 1, 3, "123456", "234567", "123", "456"));
//	this.leagueMatch.setMatchTwo(new NineBallMatch("Dude 1", "Chick 1", 2, 3, "123456", "234567", "123", "456"));
//	this.leagueMatch.setMatchThree(new NineBallMatch("Dude 2", "Chick 2", 1, 2, "234567", "123456", "123", "456"));
//	this.leagueMatch.setMatchFour(new NineBallMatch("Dude 3", "Chick 3", 1, 2, "123456", "234567", "123", "456"));
//	this.leagueMatch.setMatchFive(new NineBallMatch("Dude 4", "Chick 4", 1, 1, "234567", "123456", "123", "456"));

//  EightBall Objects
	this.leagueMatch = new EightBallLeagueMatch("123", "345", "HomeTeam", "AwayTeam", "1:00 am", "Coin-Operated");
	this.leagueMatch.setMatchOne(new EightBallMatch("Isaac Wooten", "James Armstead", 2, 3, "1", "2", "123", "345"));
	this.leagueMatch.setMatchTwo(new EightBallMatch("Dude 1", "Chick 1", 2, 3, "3", "4", "123", "345"));
	this.leagueMatch.setMatchThree(new EightBallMatch("Dude 2", "Chick 2", 2, 2, "5", "6", "123", "345"));
	this.leagueMatch.setMatchFour(new EightBallMatch("Dude 3", "Chick 3", 2, 2, "7", "8", "123", "345"));
	this.leagueMatch.setMatchFive(new EightBallMatch("Dude 4", "Chick 4", 2, 2, "9", "10", "123", "345"));
*/
 
	this.currentMatch = this.leagueMatch.MatchOne;
	this.currentMatch.PlayerOne.Score = 0;
	
	this.playerOnePocketBg = Titanium.UI.createImageView({
		backgroundImage: 'images/match/layout/pocket-noglow-player1.png',
		top: 0,
		left: 0,
		width: 282,
		height: 300,
		visible: true,
		isNinePatch: false
	});
	this.playerTwoPocketBg = Titanium.UI.createImageView({
		backgroundImage: 'images/match/layout/pocket-noglow-player2.png',
		top: 0,
		right: 0,
		width: 292,
		height: 300,
		visible: true,
		isNinePatch: false
	});
	this.playerOnePocketBgGlow = Titanium.UI.createImageView({
		backgroundImage: 'images/match/layout/pocket-glow-player1.png',
		top: 0,
		left: 0,
		width: 293,
		height: 300,
		visible: this.currentMatch.PlayerOne.CurrentlyUp,
		isNinePatch: false
	});
	this.playerTwoPocketBgGlow = Titanium.UI.createImageView({
		backgroundImage: 'images/match/layout/pocket-glow-player2.png',
		top: 0,
		right: 0,
		width: 292,
		height: 300,
		visible: this.currentMatch.PlayerTwo.CurrentlyUp,
		isNinePatch: false
	});

    this.setPlayerUpImages = function() {
        if (me.currentMatch.PlayerOne.CurrentlyUp == true) {
            if (me.currentMatch.CurrentGame.OnBreak == false && me.playerOneBallsRemainingLabel.color != '#ffffff') {
                if(me.currentMatch.CurrentGame.Ended == false) {
                    showOverlay(me.currentMatch.CurrentGame.getCurrentlyUpPlayer().getFirstNameWithInitials() + " is now up!", 400, function(){
                        me.playerOneBallsRemainingBox.backgroundImage = 'images/match/layout/indicator-pointsneededtowin-currentplayer.png';
                        me.playerOneBallsRemainingLabel.color = '#ffffff';
                        me.playerTwoBallsRemainingBox.backgroundImage = 'images/match/layout/indicator-pointsneededtowin.png';
                        me.playerTwoBallsRemainingLabel.color = '#c4eca3';
                    });
                } else {
                    me.playerOneBallsRemainingBox.backgroundImage = 'images/match/layout/indicator-pointsneededtowin-currentplayer.png';
                    me.playerOneBallsRemainingLabel.color = '#ffffff';
                    me.playerTwoBallsRemainingBox.backgroundImage = 'images/match/layout/indicator-pointsneededtowin.png';
                    me.playerTwoBallsRemainingLabel.color = '#c4eca3';
                }  
            }
            else {
                me.playerOneBallsRemainingBox.backgroundImage = 'images/match/layout/indicator-pointsneededtowin-currentplayer.png';
                me.playerOneBallsRemainingLabel.color = '#ffffff';
                me.playerTwoBallsRemainingBox.backgroundImage = 'images/match/layout/indicator-pointsneededtowin.png';
                me.playerTwoBallsRemainingLabel.color = '#c4eca3';
            }
        }
        else {
            if (me.currentMatch.CurrentGame.OnBreak == false && playerTwoBallsRemainingLabel.color != '#ffffff') {
                if(me.currentMatch.CurrentGame.Ended == false) {
                    showOverlay(me.currentMatch.CurrentGame.getCurrentlyUpPlayer().getFirstNameWithInitials() + " is now up!", 400, function(){
                        me.playerOneBallsRemainingBox.backgroundImage = 'images/match/layout/indicator-pointsneededtowin.png';
                        me.playerOneBallsRemainingLabel.color = '#c4eca3';
                        me.playerTwoBallsRemainingBox.backgroundImage = 'images/match/layout/indicator-pointsneededtowin-currentplayer.png';
                        me.playerTwoBallsRemainingLabel.color = '#ffffff';
                    });
                } else {
                    me.playerOneBallsRemainingBox.backgroundImage = 'images/match/layout/indicator-pointsneededtowin.png';
                    me.playerOneBallsRemainingLabel.color = '#c4eca3';
                    me.playerTwoBallsRemainingBox.backgroundImage = 'images/match/layout/indicator-pointsneededtowin-currentplayer.png';
                    me.playerTwoBallsRemainingLabel.color = '#ffffff';
                }
            }
            else {
                me.playerOneBallsRemainingBox.backgroundImage = 'images/match/layout/indicator-pointsneededtowin.png';
                me.playerOneBallsRemainingLabel.color = '#c4eca3';
                me.playerTwoBallsRemainingBox.backgroundImage = 'images/match/layout/indicator-pointsneededtowin-currentplayer.png';
                me.playerTwoBallsRemainingLabel.color = '#ffffff';
            }
        }
    };

    this.setEndStartOverlays = function() {
        if (me.currentMatch.CurrentGame.OnBreak == true) {
            me.shotMissedButton.title = "End Break";
            me.shotMissedButton.backgroundImage = 'images/match/buttons/btn-endbreak.png';
            me.statusBarInformationLabel.text = me.currentMatch.CurrentGame.getCurrentlyUpPlayer().getFirstNameWithInitials() + " is currently breaking in game " + me.currentMatch.getCurrentGameNumber();
            me.statusBarInformationGreen.remove(me.statusBarInformationLabel);
            me.statusBarInformation.add(me.statusBarInformationLabel);
            me.statusBarInformation.visible = true;
            me.statusBarInformationGreen.visible = false;
            me.statusBar.visible = false;
            if (me.currentMatch.getCurrentGameNumber() > 1 && me.currentMatch.CurrentGame.getBallsHitIn().length < 1) {
                me.hideStartMatchOverlay();
                me.showOverlay(me.currentMatch.CurrentGame.getCurrentlyUpPlayer().getFirstNameWithInitials() + " is breaking!", 400);
            }
        }
        else {
            me.hideStartMatchOverlay();
            if (me.currentMatch.CurrentGame.BreakingPlayerStillHitting == true) {
                me.shotMissedButton.title = "Shot Missed";
                me.shotMissedButton.backgroundImage = 'images/match/buttons/btn-shotmissed.png';
                me.statusBarInformationLabel.text = (me.leagueMatch.GameType == "NineBall") ? me.currentMatch.CurrentGame.getCurrentlyUpPlayer().getFirstNameWithInitials() + " is now in 9BR contention." : me.currentMatch.CurrentGame.getCurrentlyUpPlayer().getFirstNameWithInitials() + " is now in 8BR contention.";
                me.statusBarInformation.remove(me.statusBarInformationLabel);
                me.statusBarInformationGreen.add(me.statusBarInformationLabel);
                me.statusBarInformationGreen.visible = true;
                me.statusBarInformation.visible = false;
                me.statusBar.visible = false;
            }
            else {
                me.shotMissedButton.title = "Shot Missed";
                me.shotMissedButton.backgroundImage = 'images/match/buttons/btn-shotmissed.png';
                me.statusBarInformation.visible = false;
                me.statusBarInformationGreen.visible = false;
                me.statusBar.visible = true;
            }
        }
    };

    this.turnAndroidSignatureLabels = function() {
        if (Ti.Platform.name == 'android') {
            if(this.isSignatureTeamNameTurned == false) {
                var signatureTeamNumberT = Ti.UI.create2DMatrix().setFillAfter(true).rotate(90);
                this.signatureTeamName.animate({
                    transform: signatureTeamNumberT,
                    duration: 1
                });
            }
            if(this.isSignatureTeamNumberTurned == false) {
                var signatureTeamNumberT = Ti.UI.create2DMatrix().setFillAfter(true).rotate(90);
                this.signatureTeamNumber.animate({
                    transform: signatureTeamNumberT,
                    duration: 1
                });
            }
        }
    };

	this.updateNineBallUI = function() {
	    this.turnAndroidSignatureLabels();
	  //Match Bar
        me.matchNumberLabel.text = (me.currentMatch.Ended != true) ? "Match " + me.currentMatchNumber : "Finished";

		if (me.currentMatch.Ended == true) {
		    me.hideStartMatchOverlay();
		    if(me.atMatchResults[me.currentMatchNumber] == true) {
		        me.showMatchResultsOverlay();
		        me.hideMatchFinishedOverlay();
		    } else {
		        me.showMatchFinishedOverlay();
		        me.hideMatchResultsOverlay();
		    }

			if(me.leagueMatch.Ended() == true && me.hasSentPDF == false){
                me.hasSentPDF = true;
				leagueMatch.SmallJSON = false;
			    DataService.sendLeagueMatch(me.leagueMatch);
			    me.matchResultsShowSignatureButton();
			}
		}
		else {
            this.matchResultsOverlayContainer.visible = false;
            me.hideMatchResultsOverlay();
            me.hideMatchFinishedOverlay();
            if (me.currentMatch.CurrentGame.getBallsHitIn().length < 1 && me.isCurrentMatchStarted() == false) {
                me.showStartMatchOverlay();
            }
            else {
                me.hideStartMatchOverlay();
                if (me.currentMatch.CurrentGame.Ended == true) {
                    me.showFinishedGameOverlay();
                }
                else {
                    me.hideFinishedGameOverlay();
                }

                //Player Title Bar
                me.playerOneNameLabel.text = me.currentMatch.PlayerOne.getFirstNameWithInitials();
                me.playerTwoNameLabel.text = me.currentMatch.PlayerTwo.getFirstNameWithInitials();
                me.playerOneBallCountLabel.text = me.currentMatch.PlayerOne.BallCount;
                me.playerTwoBallCountLabel.text = me.currentMatch.PlayerTwo.BallCount;
                me.gameNumberLabel.text = "Game " + me.currentMatch.getCurrentGameNumber();

                //Pocket - MatchScore
                me.playerOneScoreLabel.text = me.currentMatch.PlayerOne.getScore();
                me.playerTwoScoreLabel.text = me.currentMatch.PlayerTwo.getScore();
                me.playerOneBallsRemainingLabel.text = me.currentMatch.PlayerOne.getRemainingBallCount();
                 me.playerTwoBallsRemainingLabel.text = me.currentMatch.PlayerTwo.getRemainingBallCount();

                me.setPlayerUpImages();
                               
                me.playerOne9BLabel.text = me.currentMatch.PlayerOne.getNineOnSnaps();
                me.playerTwo9BLabel.text = me.currentMatch.PlayerTwo.getNineOnSnaps();
                me.playerOne9BRLabel.text = me.currentMatch.PlayerOne.getBreakAndRuns();
                me.playerTwo9BRLabel.text = me.currentMatch.PlayerTwo.getBreakAndRuns();
                me.matchScorePointsLabel.text = me.currentMatch.getMatchPoints();

                me.playerOneCurrentlyShootingBall.visible = me.currentMatch.PlayerOne.CurrentlyUp;
                me.playerTwoCurrentlyShootingBall.visible = me.currentMatch.PlayerTwo.CurrentlyUp;

                me.playerOnePocketBgGlow.visible = me.currentMatch.PlayerOne.CurrentlyUp;
                me.playerTwoPocketBgGlow.visible = me.currentMatch.PlayerTwo.CurrentlyUp;

                //Button Shelf
                me.safetyButtonNumberLabel.text = me.currentMatch.getTotalSafeties();
                me.timeoutButtonNumberLabel.text = me.currentMatch.CurrentGame.getCurrentPlayerRemainingTimeouts();

                //Status Footer Bar
                me.gameScoreLabel.text = me.currentMatch.CurrentGame.getGameScore();
                me.inningsNumberLabel.text = me.currentMatch.getTotalInnings();
                me.deadBallNumberLabel.text = me.currentMatch.getTotalDeadBalls();

                me.updateShownBalls();
                me.setEndStartOverlays();
            }
        }
	};

	this.updateEightBallUI = function() {
	    this.turnAndroidSignatureLabels();
        me.matchNumberLabel.text = (me.currentMatch.Ended != true) ? "Match " + me.currentMatchNumber : "Finished";

		if (me.currentMatch.Ended == true) {
		    if(me.currentMatch.CurrentGame.PlayerOneBallType == null) {
		        me.showBallCategorySelector();
		    } else {
		        me.hideBallCategorySelector();
                 me.hideStartMatchOverlay();
                if(me.atMatchResults[me.currentMatchNumber] == true) {
                    me.showMatchResultsOverlay();
                    me.hideMatchFinishedOverlay();
                } else {
                    me.showMatchFinishedOverlay();
                    me.hideMatchResultsOverlay();
                }

                if(me.leagueMatch.Ended() == true){
                    leagueMatch.SmallJSON = false;
                    DataService.sendLeagueMatch(me.leagueMatch);
                    me.matchResultsShowSignatureButton();
                }
			}
		}
		else {
		    if(me.currentMatch.CurrentGame.PlayerOneBallType == null && me.currentMatch.ArePlayersSwitching == true && me.currentMatch.CurrentGame.getBallsHitIn().length > 0) {
		        me.showBallCategorySelector();
		    } else if(me.ballCategorySelector.visible == true) {
		        me.hideBallCategorySelector();
		    }

            this.matchResultsOverlayContainer.visible = false;
            me.hideMatchResultsOverlay();
            me.hideMatchFinishedOverlay();
            if (me.currentMatch.CurrentGame.getBallsHitIn().length < 1 && me.isCurrentMatchStarted() == false) {
                me.showStartMatchOverlay();
            }
            else {
                me.hideStartMatchOverlay();
                if (me.currentMatch.CurrentGame.Ended == true) {
                    me.showFinishedGameOverlay();
                }
                else {
                    me.hideFinishedGameOverlay();
                }

                if(this.currentMatch.CurrentGame.PlayerOneBallType != null && this.currentMatch.CurrentGame.PlayerTwoBallType != null) {
                    if(this.currentMatch.CurrentGame.PlayerOneBallType == 1) {
                        this.stripedBallViewTransformation = Ti.UI.create2DMatrix().setFillBefore(true).translate(-this.stripedBallView.left, 0);
                        this.solidBallViewTransformation = Ti.UI.create2DMatrix().setFillBefore(true).translate(this.getPlatformWidth() - 36 - this.solidBallView.left, 0);
                        this.stripedBallView.animate({
                            transform: stripedBallViewTransformation,
                            duration: 1
                        }, function() {
                            if (Ti.Platform.name == 'android') {
                                me.stripedBallView.left = 0;
                            }
                        });
                        this.solidBallView.animate({
                            transform: solidBallViewTransformation,
                            duration: 1
                        }, function() {
                            if (Ti.Platform.name == 'android') {
                                me.solidBallView.left = (me.getPlatformWidth() - 36);
                            }
                        });
                     } else {
                        this.stripedBallViewTransformation = Ti.UI.create2DMatrix().setFillBefore(true).translate(this.getPlatformWidth() - 36 - this.stripedBallView.left, 0);
                        this.solidBallViewTransformation = Ti.UI.create2DMatrix().setFillBefore(true).translate(-this.solidBallView.left, 0);
                        this.stripedBallView.animate({
                            transform: stripedBallViewTransformation,
                            duration: 1
                        }, function() {
                            if (Ti.Platform.name == 'android') {
                                me.stripedBallView.left = (me.getPlatformWidth() - 36);
                            }
                        });
                        this.solidBallView.animate({
                            transform: solidBallViewTransformation,
                            duration: 1
                        }, function() {
                            if (Ti.Platform.name == 'android') {
                                me.solidBallView.left = 0;
                            }
                        });
                    }
                    this.stripedBallView.visible = true;
                    this.solidBallView.visible = true;
                }

                //Player Title Bar
                me.playerOneNameLabel.text = me.currentMatch.PlayerOne.getFirstNameWithInitials();
                me.playerTwoNameLabel.text = me.currentMatch.PlayerTwo.getFirstNameWithInitials();
                me.playerOneBallCountLabel.text = me.currentMatch.PlayerOne.getGamesNeededToWin();
                me.playerTwoBallCountLabel.text = me.currentMatch.PlayerTwo.getGamesNeededToWin();
                me.gameNumberLabel.text = "Game " + me.currentMatch.getCurrentGameNumber();

                //Pocket - MatchScore
                me.playerOneScoreLabel.text = me.currentMatch.getPlayerOneGamesWon().toString();
                me.playerTwoScoreLabel.text = me.currentMatch.getPlayerTwoGamesWon().toString();
                me.playerOneBallsRemainingLabel.text = me.currentMatch.getPlayerOneRemainingGamesNeededToWin();
                me.playerTwoBallsRemainingLabel.text = me.currentMatch.getPlayerTwoRemainingGamesNeededToWin();

                me.setPlayerUpImages();

                me.playerOne9BLabel.text = me.currentMatch.PlayerOne.getEightOnSnaps();
                me.playerTwo9BLabel.text = me.currentMatch.PlayerTwo.getEightOnSnaps();
                me.playerOne9BRLabel.text = me.currentMatch.PlayerOne.getBreakAndRuns();
                me.playerTwo9BRLabel.text = me.currentMatch.PlayerTwo.getBreakAndRuns();
                me.matchScorePointsLabel.text = me.currentMatch.getMatchPoints();

                me.playerOneCurrentlyShootingBall.visible = me.currentMatch.PlayerOne.CurrentlyUp;
                me.playerTwoCurrentlyShootingBall.visible = me.currentMatch.PlayerTwo.CurrentlyUp;

                me.playerOnePocketBgGlow.visible = me.currentMatch.PlayerOne.CurrentlyUp;
                me.playerTwoPocketBgGlow.visible = me.currentMatch.PlayerTwo.CurrentlyUp;

                //Button Shelf
                me.safetyButtonNumberLabel.text = me.currentMatch.getTotalSafeties();
                me.timeoutButtonNumberLabel.text = me.currentMatch.CurrentGame.getCurrentPlayerRemainingTimeouts();

                //Status Footer Bar
                me.gameScoreLabel.text = me.currentMatch.CurrentGame.getGameScore();
                me.inningsNumberLabel.text = me.currentMatch.getTotalInnings();

                me.updateShownBalls();

                this.matchResultsOverlayContainer.visible = false;
                this.hideMatchResultsOverlay();
                this.hideMatchFinishedOverlay();
                me.setEndStartOverlays();
            }
        }
	};
	
	this.updateUI = function(){
	  if(this.leagueMatch.GameType == "NineBall") {
	        this.updateNineBallUI();
	  } else if(this.leagueMatch.GameType == "EightBall") {
	        this.updateEightBallUI();
	  }
	};
	
	this.startCurrentMatch = function(){
		this.matchStarted[this.currentMatchNumber] = true;
	};

	this.currentMatchAtResults = function(){
		this.atMatchResults[this.currentMatchNumber] = true;
	};

	this.isCurrentMatchStarted = function(){
		return this.matchStarted[this.currentMatchNumber];
	};
	
	this.resetCurrentMatch = function(){
		switch (this.currentMatchNumber) {
			case 1:
				this.currentMatch = this.leagueMatch.MatchOne;
				break;
			case 2:
				this.currentMatch = this.leagueMatch.MatchTwo;
				break;
			case 3:
				this.currentMatch = this.leagueMatch.MatchThree;
				break;
			case 4:
				this.currentMatch = this.leagueMatch.MatchFour;
				break;
			case 5:
				this.currentMatch = this.leagueMatch.MatchFive;
				break;
		}
		this.updateUI();
	};
	
	this.setCurrentMatch = function(match){
		switch (this.currentMatchNumber) {
			case 1:
				this.leagueMatch.MatchOne = match;
				break;
			case 2:
				this.leagueMatch.MatchTwo = match;
				break;
			case 3:
				this.leagueMatch.MatchThree = match;
				break;
			case 4:
				this.leagueMatch.MatchFour = match;
				break;
			case 5:
				this.leagueMatch.MatchFive = match;
				break;
		}
		this.updateUI();
	};
	
	this.save = function(){
		DataService.saveMatch(this.currentMatch, function(id){
			this.currentMatch.OriginalId = id;
		});
	};
	this.saveAndUpdateUI = function(){
		this.save();
		this.updateUI();
	};
	this.setCurrentMatchOriginalId = function(id){
		this.currentMatch.OriginalId = id;
	};
	
	this.matchWindow = Titanium.UI.createWindow({
		orientationModes: [Titanium.UI.PORTRAIT]
	});

	this.view = Titanium.UI.createView({
		backgroundImage: (Ti.Platform.name != 'android') ? 'images/match/background-iphone-wpockets.png' : 'images/match/background-android-wpockets.png',
		backgroundColor: 'transparent',
		top: 0,
		isNinePatch: false
	});
	this.view.add(playerOnePocketBg);
	this.view.add(playerTwoPocketBg);
	this.view.add(playerOnePocketBgGlow);
	this.view.add(playerTwoPocketBgGlow);

	Titanium.include('/pages/matchViews/header.js');
	Titanium.include('/pages/matchViews/footer.js');
	if(this.leagueMatch.GameType == "NineBall") {
	    Titanium.include('/pages/matchViews/ballDisplayNine.js');
	    Titanium.include('/pages/matchViews/rackOfBallsNine.js');
	} else if(this.leagueMatch.GameType == "EightBall") {
	    Titanium.include('/pages/matchViews/ballDisplayEight.js');
	    Titanium.include('/pages/matchViews/rackOfBallsEight.js');
    }
	Titanium.include('/pages/matchViews/ballSelector.js');
	Titanium.include('/pages/matchViews/questionsOverlay.js');
	Titanium.include('/pages/matchViews/overlays.js');
	if (Ti.Platform.name != 'android') {
		Titanium.include('/pages/matchViews/signatureView-iPhone.js');
	}
	else{
		Titanium.include('/pages/matchViews/signatureView.js');
	}


	Titanium.UI.setBackgroundColor('#000000');
	
	this.matchWindow.add(this.view);
	
	this.showMatch = function() {
		if (Ti.Platform.name != 'android') {
			Titanium.UI.iPhone.showStatusBar();
			this.matchWindow.open({
				fullscreen: false
			});
			this.updateUI();
		}
		else {
			this.matchWindow.open({
				fullscreen: true
			});
			this.updateUI();
		}
	};
	
	showMatch();
	hideIndicator();
	return this;
};