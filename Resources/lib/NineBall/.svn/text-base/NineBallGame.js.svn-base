function NineBallGame(addToPlayerOne, addToPlayerTwo, callback) {
	this.PlayerOneCallback = addToPlayerOne;
	this.PlayerTwoCallback = addToPlayerTwo;
	this.PlayerOneCallback().TimeoutsTaken = 0;
	this.PlayerTwoCallback().TimeoutsTaken = 0;
	this.MatchEndedCallback = callback;
	this.PlayerOneScore = 0;
	this.PlayerTwoScore = 0;
	this.NumberOfInnings = 0;
	this.PlayerOneNineOnSnap = false;
	this.PlayerOneBreakAndRun = false;
	this.PlayerTwoNineOnSnap = false;
	this.PlayerTwoBreakAndRun = false;
	this.Ended = false;
	this.PlayerOneBallsHitIn = [];
	this.PlayerTwoBallsHitIn = [];
	this.PlayerOneDeadBalls = [];
	this.PlayerTwoDeadBalls = [];
	this.PlayerOneLastBall = null;
	this.PlayerTwoLastBall = null;
	this.OnBreak = true;
	this.BreakingPlayerStillHitting = true;
	this.PlayerOneTimeoutsTaken = 0;
	this.PlayerTwoTimeoutsTaken = 0;

	this.getCurrentlyUpPlayer = function() {
		if (this.PlayerOneCallback().CurrentlyUp == true) {
			return this.PlayerOneCallback();
		}
		return this.PlayerTwoCallback();
	};

	this.hitSafety = function() {
		this.getCurrentlyUpPlayer().addOneToSafeties();
		this.nextPlayerIsUp();
	};

	this.getDeadBalls = function() {
		return (this.PlayerOneDeadBalls.length + this.PlayerTwoDeadBalls.length);
	};

	this.hitDeadBall = function(ballNumber) {
		if(ballNumber != 9 && !this.getBallsHitIn().exists(ballNumber)) {
			this.DeadBalls += 1;
			if(this.PlayerOneCallback().CurrentlyUp == true) {
				this.PlayerOneDeadBalls.push(ballNumber);
			} else {
				this.PlayerTwoDeadBalls.push(ballNumber);
			}
			this.checkIfAllBallsAreHitIn();
		}
	};

	this.checkIfAllBallsAreHitIn = function() {
		var allBallsHitIn = this.getBallsHitIn();

		this.Ended = (allBallsHitIn.length == 9);
		if (this.Ended == false) {
			if (allBallsHitIn.exists(9)) {
				for(i = 1;i < 9;i++) {
					if (allBallsHitIn.exists(i) != true) {
						if(this.PlayerOneCallback().CurrentlyUp == true) {
							this.PlayerOneDeadBalls.push(i);
						} else {
							this.PlayerTwoDeadBalls.push(i);
						}
					}
				}
				this.Ended = true;
			}
		}

		if(this.Ended == true && this.getBallsScored().length == 9) {
			if(this.PlayerOneCallback().CurrentlyUp == true && this.BreakingPlayerStillHitting == true) {
				this.setPlayerOneBreakAndRun();
			} else if(this.PlayerTwoCallback().CurrentlyUp == true && this.BreakingPlayerStillHitting == true) {
				this.setPlayerTwoBreakAndRun();
			}
		}
	};

	this.scoreBall = function(ballNumber) {
		if (!this.getBallsHitIn().exists(ballNumber)) {
			if (this.PlayerOneCallback().CurrentlyUp == true) {
				if (ballNumber > 0 && ballNumber < 9) {
					this.PlayerOneScore += 1;
					this.PlayerOneCallback().addToScore(1);
				}
				else {
					this.PlayerOneScore += 2;
					this.PlayerOneCallback().addToScore(2);
					if (this.OnBreak == true && this.getBallsScored().length != 8) {
						this.setPlayerOneNineOnSnap();
					}
				}
				this.PlayerOneLastBall = ballNumber;
				this.PlayerTwoLastBall = null;
				this.PlayerOneBallsHitIn.push(ballNumber);
			}
			else {
				if (ballNumber > 0 && ballNumber < 9) {
					this.PlayerTwoScore += 1;
					this.PlayerTwoCallback().addToScore(1);
				}
				else {
					this.PlayerTwoScore += 2;
					this.PlayerTwoCallback().addToScore(2);
					if (this.OnBreak == true && this.getBallsScored().length != 8) {
						this.setPlayerTwoNineOnSnap();
					}
				}
				this.PlayerTwoLastBall = ballNumber;
				this.PlayerOneLastBall = null;
				this.PlayerTwoBallsHitIn.push(ballNumber);
			}
			this.checkIfAllBallsAreHitIn();
			this.checkForWinner();
		}
	};

	this.checkForWinner = function() {
		if (this.PlayerOneCallback().hasWon() == true || this.PlayerTwoCallback().hasWon() == true) {
			this.End();
			this.MatchEndedCallback();
		}
	};

	this.addOneToNumberOfInnings = function() {
		this.NumberOfInnings += 1;
	};

	this.nextPlayerIsUp = function() {
		if(this.OnBreak != true ||
		((this.PlayerTwoCallback().CurrentlyUp == true && this.PlayerTwoBallsHitIn.length == 0) || (this.PlayerOneCallback().CurrentlyUp == true && this.PlayerOneBallsHitIn.length == 0))) {
			if (this.PlayerOneCallback().CurrentlyUp == true) {
				this.PlayerTwoCallback().CurrentlyUp = true;
				this.PlayerOneCallback().CurrentlyUp = false;
			} else if(this.PlayerTwoCallback().CurrentlyUp == true) {
				this.PlayerTwoCallback().CurrentlyUp = false;
				this.PlayerOneCallback().CurrentlyUp = true;
				this.addOneToNumberOfInnings();
			} else {
				this.PlayerOneCallback().CurrentlyUp = true;
			}
			this.BreakingPlayerStillHitting = false;
		}
		this.OnBreak = false;
	};

	this.setPlayerOneNineOnSnap = function() {
		if (this.PlayerOneNineOnSnap != true) {
			this.PlayerOneCallback().addOneToNineOnSnaps();
		}
		this.PlayerOneNineOnSnap = true;
	};

	this.setPlayerTwoNineOnSnap = function(){
		if (this.PlayerTwoNineOnSnap != true) {
			this.PlayerTwoCallback().addOneToNineOnSnaps();
		}
		this.PlayerTwoNineOnSnap = true;
	};

	this.setPlayerOneBreakAndRun = function() {
		if (this.PlayerOneBreakAndRun != true) {
			this.PlayerOneCallback().addOneToBreakAndRuns();
		}
		this.PlayerOneBreakAndRun = true;
	};

	this.setPlayerTwoBreakAndRun = function(){
		if (this.PlayerTwoBreakAndRun != true) {
			this.PlayerTwoCallback().addOneToBreakAndRuns();
		}
		this.PlayerTwoBreakAndRun = true;
	};

	this.getWinningPlayerName = function() {
		if(getScoreRatio(this.PlayerOneScore, this.PlayerOneCallback().BallCount) > getScoreRatio(this.PlayerTwoScore, this.PlayerTwoCallback().BallCount)) {
			return this.PlayerOneCallback().getFirstNameWithInitials();
		} else if(getScoreRatio(this.PlayerOneScore, this.PlayerOneCallback().BallCount) < getScoreRatio(this.PlayerTwoScore, this.PlayerTwoCallback().BallCount)) {
			return this.PlayerTwoCallback().getFirstNameWithInitials();
		}
		return "Tie";
	};

	this.getGameScore = function() {
		return this.PlayerOneScore + '-' + this.PlayerTwoScore;
	};

	this.getPlayerOneBallsHitIn = function() {
		return this.PlayerOneBallsHitIn.concat(this.PlayerOneDeadBalls);
	};

	this.getPlayerTwoBallsHitIn = function() {
		return this.PlayerTwoBallsHitIn.concat(this.PlayerTwoDeadBalls);
	};

	this.getBallsHitIn = function() {
		return this.PlayerOneBallsHitIn.concat(this.PlayerTwoBallsHitIn).concat(this.PlayerOneDeadBalls).concat(this.PlayerTwoDeadBalls);
	};

	this.getBallsScored = function() {
		return this.PlayerOneBallsHitIn.concat(this.PlayerTwoBallsHitIn);
	};

	this.getCurrentPlayerRemainingTimeouts = function() {
		if (this.PlayerOneCallback().CurrentlyUp == true) {
			return (this.PlayerOneCallback().TimeoutsAllowed - this.PlayerOneTimeoutsTaken).toString();
		}
		return (this.PlayerTwoCallback().TimeoutsAllowed - this.PlayerTwoTimeoutsTaken).toString();
	};

	this.takeTimeout = function() {
		if(this.getCurrentPlayerRemainingTimeouts() > 0) {
			if (this.PlayerOneCallback().CurrentlyUp == true) {
				this.PlayerOneTimeoutsTaken += 1;
			} else {
					this.PlayerTwoTimeoutsTaken += 1;
			}
		}
	};

	this.breakIsOver = function() {
		this.OnBreak = false;
	};

	this.End = function() {
		this.Ended = true;
	};

	this.toJSON = function() {
		return {
			PlayerOneScore: this.PlayerOneScore,
			PlayerTwoScore: this.PlayerTwoScore,
			PlayerOneTimeoutsTaken: this.PlayerOneTimeoutsTaken,
			PlayerTwoTimeoutsTaken: this.PlayerTwoTimeoutsTaken,
			NumberOfInnings: this.NumberOfInnings,
			PlayerOneNineOnSnap: this.PlayerOneNineOnSnap,
			PlayerOneBreakAndRun: this.PlayerOneBreakAndRun,
			PlayerTwoNineOnSnap: this.PlayerTwoNineOnSnap,
			PlayerTwoBreakAndRun: this.PlayerTwoBreakAndRun,
			Ended: this.Ended,
			PlayerOneBallsHitIn: this.PlayerOneBallsHitIn,
			PlayerTwoBallsHitIn: this.PlayerTwoBallsHitIn,
			PlayerOneDeadBalls: this.PlayerOneDeadBalls,
			PlayerTwoDeadBalls: this.PlayerTwoDeadBalls,
			PlayerOneLastBall: this.PlayerOneLastBall,
			PlayerTwoLastBall: this.PlayerTwoLastBall,
			OnBreak: this.OnBreak,
			BreakingPlayerStillHitting: this.BreakingPlayerStillHitting
		};
	};

	this.fromJSON = function(gameJSON) {
		this.PlayerOneScore = gameJSON.PlayerOneScore;
		this.PlayerTwoScore = gameJSON.PlayerTwoScore;
		this.NumberOfInnings = gameJSON.NumberOfInnings;
		this.PlayerOneTimeoutsTaken = gameJSON.PlayerOneTimeoutsTaken;
		this.PlayerTwoTimeoutsTaken = gameJSON.PlayerTwoTimeoutsTaken;
		this.PlayerOneNineOnSnap = gameJSON.PlayerOneNineOnSnap;
		this.PlayerOneBreakAndRun = gameJSON.PlayerOneBreakAndRun;
		this.PlayerTwoNineOnSnap = gameJSON.PlayerTwoNineOnSnap;
		this.PlayerTwoBreakAndRun = gameJSON.PlayerTwoBreakAndRun;
		this.Ended = gameJSON.Ended;
		this.PlayerOneBallsHitIn = gameJSON.PlayerOneBallsHitIn;
		this.PlayerTwoBallsHitIn = gameJSON.PlayerTwoBallsHitIn;
		this.PlayerOneDeadBalls = gameJSON.PlayerOneDeadBalls;
		this.PlayerTwoDeadBalls = gameJSON.PlayerTwoDeadBalls;
		this.PlayerOneLastBall = gameJSON.PlayerOneLastBall;
		this.PlayerTwoLastBall = gameJSON.PlayerTwoLastBall;
		this.OnBreak = gameJSON.OnBreak;
		this.BreakingPlayerStillHitting = gameJSON.BreakingPlayerStillHitting;
	};
};
